
mpu6050_atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001f76  0000200a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  0080016e  0080016e  00002078  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001539  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2b  00000000  00000000  00003745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a24  00000000  00000000  00004170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d4  00000000  00000000  00004e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a12  00000000  00000000  0000552c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	00 40       	sbci	r16, 0x00	; 0
      98:	7a 10       	cpse	r7, r10
      9a:	f3 5a       	subi	r31, 0xA3	; 163
      9c:	00 a0       	ldd	r0, Z+32	; 0x20
      9e:	72 4e       	sbci	r23, 0xE2	; 226
      a0:	18 09       	sbc	r17, r8
      a2:	00 10       	cpse	r0, r0
      a4:	a5 d4       	rcall	.+2378   	; 0x9f0 <main+0x94>
      a6:	e8 00       	.word	0x00e8	; ????
      a8:	00 e8       	ldi	r16, 0x80	; 128
      aa:	76 48       	sbci	r23, 0x86	; 134
      ac:	17 00       	.word	0x0017	; ????
      ae:	00 e4       	ldi	r16, 0x40	; 64
      b0:	0b 54       	subi	r16, 0x4B	; 75
      b2:	02 00       	.word	0x0002	; ????
      b4:	00 ca       	rjmp	.-3072   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b6>
      b6:	9a 3b       	cpi	r25, 0xBA	; 186
      b8:	00 00       	nop
      ba:	00 e1       	ldi	r16, 0x10	; 16
      bc:	f5 05       	cpc	r31, r5
      be:	00 00       	nop
      c0:	80 96       	adiw	r24, 0x20	; 32
      c2:	98 00       	.word	0x0098	; ????
      c4:	00 00       	nop
      c6:	40 42       	sbci	r20, 0x20	; 32
      c8:	0f 00       	.word	0x000f	; ????
      ca:	00 00       	nop
      cc:	a0 86       	std	Z+8, r10	; 0x08
      ce:	01 00       	.word	0x0001	; ????
      d0:	00 00       	nop
      d2:	10 27       	eor	r17, r16
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	e8 03       	fmulsu	r22, r16
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	64 00       	.word	0x0064	; ????
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	0a 00       	.word	0x000a	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	01 00       	.word	0x0001	; ????
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	2c 76       	andi	r18, 0x6C	; 108
      f2:	d8 88       	ldd	r13, Y+16	; 0x10
      f4:	dc 67       	ori	r29, 0x7C	; 124
      f6:	4f 08       	sbc	r4, r15
      f8:	23 df       	rcall	.-442    	; 0xffffff40 <__eeprom_end+0xff7eff40>
      fa:	c1 df       	rcall	.-126    	; 0x7e <__SREG__+0x3f>
      fc:	ae 59       	subi	r26, 0x9E	; 158
      fe:	e1 b1       	in	r30, 0x01	; 1
     100:	b7 96       	adiw	r30, 0x27	; 39
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e4 53       	subi	r30, 0x34	; 52
     106:	c6 3a       	cpi	r28, 0xA6	; 166
     108:	e6 51       	subi	r30, 0x16	; 22
     10a:	99 76       	andi	r25, 0x69	; 105
     10c:	96 e8       	ldi	r25, 0x86	; 134
     10e:	e6 c2       	rjmp	.+1484   	; 0x6dc <kalibrasi+0x3c>
     110:	84 26       	eor	r8, r20
     112:	eb 89       	ldd	r30, Y+19	; 0x13
     114:	8c 9b       	sbis	0x11, 4	; 17
     116:	62 ed       	ldi	r22, 0xD2	; 210
     118:	40 7c       	andi	r20, 0xC0	; 192
     11a:	6f fc       	.word	0xfc6f	; ????
     11c:	ef bc       	out	0x2f, r14	; 47
     11e:	9c 9f       	mul	r25, r28
     120:	40 f2       	brcs	.-112    	; 0xb2 <__trampolines_end+0x1c>
     122:	ba a5       	ldd	r27, Y+42	; 0x2a
     124:	6f a5       	ldd	r22, Y+47	; 0x2f
     126:	f4 90       	lpm	r15, Z
     128:	05 5a       	subi	r16, 0xA5	; 165
     12a:	2a f7       	brpl	.-54     	; 0xf6 <__trampolines_end+0x60>
     12c:	5c 93       	st	X, r21
     12e:	6b 6c       	ori	r22, 0xCB	; 203
     130:	f9 67       	ori	r31, 0x79	; 121
     132:	6d c1       	rjmp	.+730    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     134:	1b fc       	.word	0xfc1b	; ????
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	0d 47       	sbci	r16, 0x7D	; 125
     13a:	fe f5       	brtc	.+126    	; 0x1ba <.do_clear_bss_loop>
     13c:	20 e6       	ldi	r18, 0x60	; 96
     13e:	b5 00       	.word	0x00b5	; ????
     140:	d0 ed       	ldi	r29, 0xD0	; 208
     142:	90 2e       	mov	r9, r16
     144:	03 00       	.word	0x0003	; ????
     146:	94 35       	cpi	r25, 0x54	; 84
     148:	77 05       	cpc	r23, r7
     14a:	00 80       	ld	r0, Z
     14c:	84 1e       	adc	r8, r20
     14e:	08 00       	.word	0x0008	; ????
     150:	00 20       	and	r0, r0
     152:	4e 0a       	sbc	r4, r30
     154:	00 00       	nop
     156:	00 c8       	rjmp	.-4096   	; 0xfffff158 <__eeprom_end+0xff7ef158>
     158:	0c 33       	cpi	r16, 0x3C	; 60
     15a:	33 33       	cpi	r19, 0x33	; 51
     15c:	33 0f       	add	r19, r19
     15e:	98 6e       	ori	r25, 0xE8	; 232
     160:	12 83       	std	Z+2, r17	; 0x02
     162:	11 41       	sbci	r17, 0x11	; 17
     164:	ef 8d       	ldd	r30, Y+31	; 0x1f
     166:	21 14       	cp	r2, r1
     168:	89 3b       	cpi	r24, 0xB9	; 185
     16a:	e6 55       	subi	r30, 0x56	; 86
     16c:	16 cf       	rjmp	.-468    	; 0xffffff9a <__eeprom_end+0xff7eff9a>
     16e:	fe e6       	ldi	r31, 0x6E	; 110
     170:	db 18       	sub	r13, r11
     172:	d1 84       	ldd	r13, Z+9	; 0x09
     174:	4b 38       	cpi	r20, 0x8B	; 139
     176:	1b f7       	brvc	.-58     	; 0x13e <__trampolines_end+0xa8>
     178:	7c 1d       	adc	r23, r12
     17a:	90 1d       	adc	r25, r0
     17c:	a4 bb       	out	0x14, r26	; 20
     17e:	e4 24       	eor	r14, r4
     180:	20 32       	cpi	r18, 0x20	; 32
     182:	84 72       	andi	r24, 0x24	; 36
     184:	5e 22       	and	r5, r30
     186:	81 00       	.word	0x0081	; ????
     188:	c9 f1       	breq	.+114    	; 0x1fc <I2C_Repeated_Start+0x22>
     18a:	24 ec       	ldi	r18, 0xC4	; 196
     18c:	a1 e5       	ldi	r26, 0x51	; 81
     18e:	3d 27       	eor	r19, r29

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e6 e7       	ldi	r30, 0x76	; 118
     1a4:	ff e1       	ldi	r31, 0x1F	; 31
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	ae 36       	cpi	r26, 0x6E	; 110
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	ae e6       	ldi	r26, 0x6E	; 110
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	aa 3c       	cpi	r26, 0xCA	; 202
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 ae 04 	call	0x95c	; 0x95c <main>
     1c6:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1d2:	88 e4       	ldi	r24, 0x48	; 72
     1d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1d8:	08 95       	ret

000001da <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     1da:	94 ea       	ldi	r25, 0xA4	; 164
     1dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     1e0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1e4:	99 23       	and	r25, r25
     1e6:	e4 f7       	brge	.-8      	; 0x1e0 <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ec:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     1ee:	90 31       	cpi	r25, 0x10	; 16
     1f0:	91 f4       	brne	.+36     	; 0x216 <I2C_Repeated_Start+0x3c>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     1f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1f6:	84 e8       	ldi	r24, 0x84	; 132
     1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     200:	88 23       	and	r24, r24
     202:	e4 f7       	brge	.-8      	; 0x1fc <I2C_Repeated_Start+0x22>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     204:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     208:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     20a:	80 34       	cpi	r24, 0x40	; 64
     20c:	31 f0       	breq	.+12     	; 0x21a <I2C_Repeated_Start+0x40>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     20e:	80 32       	cpi	r24, 0x20	; 32
     210:	31 f4       	brne	.+12     	; 0x21e <I2C_Repeated_Start+0x44>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     21e:	83 e0       	ldi	r24, 0x03	; 3
}
     220:	08 95       	ret

00000222 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     222:	84 e9       	ldi	r24, 0x94	; 148
     224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     228:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     22c:	84 fd       	sbrc	r24, 4
     22e:	fc cf       	rjmp	.-8      	; 0x228 <I2C_Stop+0x6>
}
     230:	08 95       	ret

00000232 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     232:	cf 93       	push	r28
     234:	c8 2f       	mov	r28, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     236:	84 ea       	ldi	r24, 0xA4	; 164
     238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     23c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     240:	88 23       	and	r24, r24
     242:	e4 f7       	brge	.-8      	; 0x23c <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     248:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     24a:	88 30       	cpi	r24, 0x08	; 8
     24c:	a1 f7       	brne	.-24     	; 0x236 <I2C_Start_Wait+0x4>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     24e:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     252:	84 e8       	ldi	r24, 0x84	; 132
     254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     25c:	88 23       	and	r24, r24
     25e:	e4 f7       	brge	.-8      	; 0x258 <I2C_Start_Wait+0x26>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     260:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     264:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     266:	88 31       	cpi	r24, 0x18	; 24
     268:	19 f0       	breq	.+6      	; 0x270 <I2C_Start_Wait+0x3e>
		{
			I2C_Stop();										/* If not then generate stop condition */
     26a:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>
			continue;										/* continue with start loop again */
     26e:	e3 cf       	rjmp	.-58     	; 0x236 <I2C_Start_Wait+0x4>
		}
		break;												/* If yes then break loop */
	}
}
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     274:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     278:	84 e8       	ldi	r24, 0x84	; 132
     27a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     27e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     282:	88 23       	and	r24, r24
     284:	e4 f7       	brge	.-8      	; 0x27e <I2C_Write+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     286:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     28a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     28c:	88 32       	cpi	r24, 0x28	; 40
     28e:	21 f0       	breq	.+8      	; 0x298 <I2C_Write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     290:	80 33       	cpi	r24, 0x30	; 48
     292:	21 f4       	brne	.+8      	; 0x29c <I2C_Write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     29c:	82 e0       	ldi	r24, 0x02	; 2
}
     29e:	08 95       	ret

000002a0 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     2a0:	84 ec       	ldi	r24, 0xC4	; 196
     2a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     2a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2aa:	88 23       	and	r24, r24
     2ac:	e4 f7       	brge	.-8      	; 0x2a6 <I2C_Read_Ack+0x6>
	return TWDR;											/* Return received data */
     2ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
     2b2:	08 95       	ret

000002b4 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     2b4:	84 e8       	ldi	r24, 0x84	; 132
     2b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     2ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2be:	88 23       	and	r24, r24
     2c0:	e4 f7       	brge	.-8      	; 0x2ba <I2C_Read_Nack+0x6>
	return TWDR;											/* Return received data */
     2c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
     2c6:	08 95       	ret

000002c8 <map>:
volatile unsigned long timer1_millis;

float angle = 0;
const float alpha = 0.95;

long map(long x, long in_min, long in_max, long out_min, long out_max) {
     2c8:	4f 92       	push	r4
     2ca:	5f 92       	push	r5
     2cc:	6f 92       	push	r6
     2ce:	7f 92       	push	r7
     2d0:	af 92       	push	r10
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	29 01       	movw	r4, r18
     2ea:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) +
     2ec:	9b 01       	movw	r18, r22
     2ee:	ac 01       	movw	r20, r24
     2f0:	24 19       	sub	r18, r4
     2f2:	35 09       	sbc	r19, r5
     2f4:	46 09       	sbc	r20, r6
     2f6:	57 09       	sbc	r21, r7
     2f8:	89 89       	ldd	r24, Y+17	; 0x11
     2fa:	9a 89       	ldd	r25, Y+18	; 0x12
     2fc:	ab 89       	ldd	r26, Y+19	; 0x13
     2fe:	bc 89       	ldd	r27, Y+20	; 0x14
     300:	bc 01       	movw	r22, r24
     302:	cd 01       	movw	r24, r26
     304:	6a 19       	sub	r22, r10
     306:	7b 09       	sbc	r23, r11
     308:	8c 09       	sbc	r24, r12
     30a:	9d 09       	sbc	r25, r13
     30c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__mulsi3>
     310:	a8 01       	movw	r20, r16
     312:	97 01       	movw	r18, r14
     314:	24 19       	sub	r18, r4
     316:	35 09       	sbc	r19, r5
     318:	46 09       	sbc	r20, r6
     31a:	57 09       	sbc	r21, r7
     31c:	0e 94 0f 0a 	call	0x141e	; 0x141e <__divmodsi4>
     320:	c6 01       	movw	r24, r12
     322:	b5 01       	movw	r22, r10
     324:	62 0f       	add	r22, r18
     326:	73 1f       	adc	r23, r19
     328:	84 1f       	adc	r24, r20
     32a:	95 1f       	adc	r25, r21
	out_min;
}
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	bf 90       	pop	r11
     33e:	af 90       	pop	r10
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	08 95       	ret

0000034a <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34a:	2f ef       	ldi	r18, 0xFF	; 255
     34c:	82 e5       	ldi	r24, 0x52	; 82
     34e:	97 e0       	ldi	r25, 0x07	; 7
     350:	21 50       	subi	r18, 0x01	; 1
     352:	80 40       	sbci	r24, 0x00	; 0
     354:	90 40       	sbci	r25, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <MPU6050_Init+0x6>
     358:	00 c0       	rjmp	.+0      	; 0x35a <MPU6050_Init+0x10>
     35a:	00 00       	nop

void MPU6050_Init()								/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     35c:	80 ed       	ldi	r24, 0xD0	; 208
     35e:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     362:	89 e1       	ldi	r24, 0x19	; 25
     364:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     368:	87 e0       	ldi	r24, 0x07	; 7
     36a:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Stop();
     36e:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     372:	80 ed       	ldi	r24, 0xD0	; 208
     374:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     378:	8b e6       	ldi	r24, 0x6B	; 107
     37a:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Stop();
     384:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     388:	80 ed       	ldi	r24, 0xD0	; 208
     38a:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     38e:	8a e1       	ldi	r24, 0x1A	; 26
     390:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Stop();
     39a:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     39e:	80 ed       	ldi	r24, 0xD0	; 208
     3a0:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3a4:	8b e1       	ldi	r24, 0x1B	; 27
     3a6:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Stop();
     3b0:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3b4:	80 ed       	ldi	r24, 0xD0	; 208
     3b6:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     3ba:	88 e3       	ldi	r24, 0x38	; 56
     3bc:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Write(0x01);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Stop();
     3c6:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>
     3ca:	08 95       	ret

000003cc <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     3cc:	80 ed       	ldi	r24, 0xD0	; 208
     3ce:	0e 94 19 01 	call	0x232	; 0x232 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */ 
     3d2:	8b e3       	ldi	r24, 0x3B	; 59
     3d4:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     3d8:	81 ed       	ldi	r24, 0xD1	; 209
     3da:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Repeated_Start>
     3de:	08 95       	ret

000003e0 <Read_RawValue>:
}

void Read_RawValue()
{
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
	MPU_Start_Loc();									/* Read Gyro values */
     3e4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     3ec:	c8 2f       	mov	r28, r24
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	dc 2f       	mov	r29, r28
     3f2:	cc 27       	eor	r28, r28
     3f4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     3f8:	be 01       	movw	r22, r28
     3fa:	68 2b       	or	r22, r24
     3fc:	07 2e       	mov	r0, r23
     3fe:	00 0c       	add	r0, r0
     400:	88 0b       	sbc	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     408:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <Acc_x>
     40c:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <Acc_x+0x1>
     410:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <Acc_x+0x2>
     414:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     418:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     41c:	c8 2f       	mov	r28, r24
     41e:	d0 e0       	ldi	r29, 0x00	; 0
     420:	dc 2f       	mov	r29, r28
     422:	cc 27       	eor	r28, r28
     424:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     428:	be 01       	movw	r22, r28
     42a:	68 2b       	or	r22, r24
     42c:	07 2e       	mov	r0, r23
     42e:	00 0c       	add	r0, r0
     430:	88 0b       	sbc	r24, r24
     432:	99 0b       	sbc	r25, r25
     434:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     438:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <Acc_y>
     43c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <Acc_y+0x1>
     440:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Acc_y+0x2>
     444:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     448:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     44c:	c8 2f       	mov	r28, r24
     44e:	d0 e0       	ldi	r29, 0x00	; 0
     450:	dc 2f       	mov	r29, r28
     452:	cc 27       	eor	r28, r28
     454:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     458:	be 01       	movw	r22, r28
     45a:	68 2b       	or	r22, r24
     45c:	07 2e       	mov	r0, r23
     45e:	00 0c       	add	r0, r0
     460:	88 0b       	sbc	r24, r24
     462:	99 0b       	sbc	r25, r25
     464:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     468:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <Acc_z>
     46c:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <Acc_z+0x1>
     470:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <Acc_z+0x2>
     474:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <Acc_z+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     478:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     47c:	c8 2f       	mov	r28, r24
     47e:	d0 e0       	ldi	r29, 0x00	; 0
     480:	dc 2f       	mov	r29, r28
     482:	cc 27       	eor	r28, r28
     484:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     488:	be 01       	movw	r22, r28
     48a:	68 2b       	or	r22, r24
     48c:	07 2e       	mov	r0, r23
     48e:	00 0c       	add	r0, r0
     490:	88 0b       	sbc	r24, r24
     492:	99 0b       	sbc	r25, r25
     494:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     498:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <Temperature>
     49c:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <Temperature+0x1>
     4a0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Temperature+0x2>
     4a4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4a8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     4ac:	c8 2f       	mov	r28, r24
     4ae:	d0 e0       	ldi	r29, 0x00	; 0
     4b0:	dc 2f       	mov	r29, r28
     4b2:	cc 27       	eor	r28, r28
     4b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     4b8:	be 01       	movw	r22, r28
     4ba:	68 2b       	or	r22, r24
     4bc:	07 2e       	mov	r0, r23
     4be:	00 0c       	add	r0, r0
     4c0:	88 0b       	sbc	r24, r24
     4c2:	99 0b       	sbc	r25, r25
     4c4:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     4c8:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <Gyro_x>
     4cc:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <Gyro_x+0x1>
     4d0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <Gyro_x+0x2>
     4d4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     4dc:	c8 2f       	mov	r28, r24
     4de:	d0 e0       	ldi	r29, 0x00	; 0
     4e0:	dc 2f       	mov	r29, r28
     4e2:	cc 27       	eor	r28, r28
     4e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     4e8:	be 01       	movw	r22, r28
     4ea:	68 2b       	or	r22, r24
     4ec:	07 2e       	mov	r0, r23
     4ee:	00 0c       	add	r0, r0
     4f0:	88 0b       	sbc	r24, r24
     4f2:	99 0b       	sbc	r25, r25
     4f4:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     4f8:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <Gyro_y>
     4fc:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <Gyro_y+0x1>
     500:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <Gyro_y+0x2>
     504:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     508:	0e 94 50 01 	call	0x2a0	; 0x2a0 <I2C_Read_Ack>
     50c:	c8 2f       	mov	r28, r24
     50e:	d0 e0       	ldi	r29, 0x00	; 0
     510:	dc 2f       	mov	r29, r28
     512:	cc 27       	eor	r28, r28
     514:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_Read_Nack>
     518:	be 01       	movw	r22, r28
     51a:	68 2b       	or	r22, r24
     51c:	07 2e       	mov	r0, r23
     51e:	00 0c       	add	r0, r0
     520:	88 0b       	sbc	r24, r24
     522:	99 0b       	sbc	r25, r25
     524:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     528:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <Gyro_z>
     52c:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <Gyro_z+0x1>
     530:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <Gyro_z+0x2>
     534:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <Gyro_z+0x3>
	I2C_Stop();
     538:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Stop>
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <Compute>:


void Compute(){
     542:	4f 92       	push	r4
     544:	5f 92       	push	r5
     546:	6f 92       	push	r6
     548:	7f 92       	push	r7
     54a:	8f 92       	push	r8
     54c:	9f 92       	push	r9
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <Compute+0x1e>
     560:	00 d0       	rcall	.+0      	; 0x562 <Compute+0x20>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
	double timeChange = FIXED_TIME_STEP;
	
	double errinp = Setpoint - Gyro_x;
     566:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <Gyro_x>
     56a:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <Gyro_x+0x1>
     56e:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <Gyro_x+0x2>
     572:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <Gyro_x+0x3>
     576:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <Setpoint>
     57a:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <Setpoint+0x1>
     57e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Setpoint+0x2>
     582:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Setpoint+0x3>
     586:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__subsf3>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
	errSum += (errinp * timeChange);
     58e:	2a e0       	ldi	r18, 0x0A	; 10
     590:	37 ed       	ldi	r19, 0xD7	; 215
     592:	43 e2       	ldi	r20, 0x23	; 35
     594:	5c e3       	ldi	r21, 0x3C	; 60
     596:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     59a:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <errSum>
     59e:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <errSum+0x1>
     5a2:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <errSum+0x2>
     5a6:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <errSum+0x3>
     5aa:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     5ae:	4b 01       	movw	r8, r22
     5b0:	5c 01       	movw	r10, r24
     5b2:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <errSum>
     5b6:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <errSum+0x1>
     5ba:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <errSum+0x2>
     5be:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <errSum+0x3>
	double dErr = (errinp - lastErr) / timeChange;
     5c2:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <lastErr>
     5c6:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <lastErr+0x1>
     5ca:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <lastErr+0x2>
     5ce:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <lastErr+0x3>
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__subsf3>
     5da:	2a e0       	ldi	r18, 0x0A	; 10
     5dc:	37 ed       	ldi	r19, 0xD7	; 215
     5de:	43 e2       	ldi	r20, 0x23	; 35
     5e0:	5c e3       	ldi	r21, 0x3C	; 60
     5e2:	0e 94 de 07 	call	0xfbc	; 0xfbc <__divsf3>
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	7a 83       	std	Y+2, r23	; 0x02
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	9c 83       	std	Y+4, r25	; 0x04
	
	Output = Kp * errinp + Ki * errSum + Kd * dErr;
     5ee:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Kp>
     5f2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <Kp+0x1>
     5f6:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Kp+0x2>
     5fa:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Kp+0x3>
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     606:	2b 01       	movw	r4, r22
     608:	3c 01       	movw	r6, r24
     60a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <Ki>
     60e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <Ki+0x1>
     612:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <Ki+0x2>
     616:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <Ki+0x3>
     61a:	c5 01       	movw	r24, r10
     61c:	b4 01       	movw	r22, r8
     61e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     622:	9b 01       	movw	r18, r22
     624:	ac 01       	movw	r20, r24
     626:	c3 01       	movw	r24, r6
     628:	b2 01       	movw	r22, r4
     62a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     62e:	4b 01       	movw	r8, r22
     630:	5c 01       	movw	r10, r24
     632:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Kd>
     636:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Kd+0x1>
     63a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Kd+0x2>
     63e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Kd+0x3>
     642:	69 81       	ldd	r22, Y+1	; 0x01
     644:	7a 81       	ldd	r23, Y+2	; 0x02
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	9c 81       	ldd	r25, Y+4	; 0x04
     64a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     65a:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <Output>
     65e:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <Output+0x1>
     662:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Output+0x2>
     666:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Output+0x3>
	
	lastErr = errinp;
     66a:	c0 92 a2 01 	sts	0x01A2, r12	; 0x8001a2 <lastErr>
     66e:	d0 92 a3 01 	sts	0x01A3, r13	; 0x8001a3 <lastErr+0x1>
     672:	e0 92 a4 01 	sts	0x01A4, r14	; 0x8001a4 <lastErr+0x2>
     676:	f0 92 a5 01 	sts	0x01A5, r15	; 0x8001a5 <lastErr+0x3>
}
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	9f 90       	pop	r9
     694:	8f 90       	pop	r8
     696:	7f 90       	pop	r7
     698:	6f 90       	pop	r6
     69a:	5f 90       	pop	r5
     69c:	4f 90       	pop	r4
     69e:	08 95       	ret

000006a0 <kalibrasi>:

void kalibrasi(int n){
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	6e 97       	sbiw	r28, 0x1e	; 30
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	6c 01       	movw	r12, r24
	
	for (int i = 0; i < n; i++){
     6c2:	e1 2c       	mov	r14, r1
     6c4:	f1 2c       	mov	r15, r1
     6c6:	7f c0       	rjmp	.+254    	; 0x7c6 <kalibrasi+0x126>
		char buffer[20], intbuffer[10];
		Read_RawValue();
     6c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Read_RawValue>
		
		    //Add the gyro x offset to the gyro_x_cal variable
		    gyro_x_cal += Gyro_x;
     6cc:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <gyro_x_cal>
     6d0:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <gyro_x_cal+0x1>
     6d4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gyro_x_cal+0x2>
     6d8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <gyro_x_cal+0x3>
     6dc:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     6e0:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <Gyro_x>
     6e4:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <Gyro_x+0x1>
     6e8:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <Gyro_x+0x2>
     6ec:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <Gyro_x+0x3>
     6f0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     6f4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixsfsi>
     6f8:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <gyro_x_cal>
     6fc:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <gyro_x_cal+0x1>
     700:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gyro_x_cal+0x2>
     704:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <gyro_x_cal+0x3>
		    //Add the gyro y offset to the gyro_y_cal variable
		    gyro_y_cal += Gyro_y;
     708:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <gyro_y_cal>
     70c:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <gyro_y_cal+0x1>
     710:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gyro_y_cal+0x2>
     714:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <gyro_y_cal+0x3>
     718:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     71c:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <Gyro_y>
     720:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <Gyro_y+0x1>
     724:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <Gyro_y+0x2>
     728:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <Gyro_y+0x3>
     72c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     730:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixsfsi>
     734:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <gyro_y_cal>
     738:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <gyro_y_cal+0x1>
     73c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <gyro_y_cal+0x2>
     740:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <gyro_y_cal+0x3>
		    //Add the gyro z offset to the gyro_z_cal variable
		    gyro_z_cal += Gyro_z;
     744:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <gyro_z_cal>
     748:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <gyro_z_cal+0x1>
     74c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <gyro_z_cal+0x2>
     750:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <gyro_z_cal+0x3>
     754:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     758:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <Gyro_z>
     75c:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <Gyro_z+0x1>
     760:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <Gyro_z+0x2>
     764:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <Gyro_z+0x3>
     768:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     76c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixsfsi>
     770:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <gyro_z_cal>
     774:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <gyro_z_cal+0x1>
     778:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <gyro_z_cal+0x2>
     77c:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <gyro_z_cal+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     780:	80 e1       	ldi	r24, 0x10	; 16
     782:	8a 95       	dec	r24
     784:	f1 f7       	brne	.-4      	; 0x782 <kalibrasi+0xe2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     786:	8e 01       	movw	r16, r28
     788:	0b 5e       	subi	r16, 0xEB	; 235
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	4a e0       	ldi	r20, 0x0A	; 10
     78e:	b8 01       	movw	r22, r16
     790:	c6 01       	movw	r24, r12
     792:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__itoa_ncheck>
			_delay_us(3);
			
			itoa(n, intbuffer, 10);
			sprintf(buffer,"kalibrasi- %s/s\r\n", intbuffer);
     796:	1f 93       	push	r17
     798:	0f 93       	push	r16
     79a:	84 e1       	ldi	r24, 0x14	; 20
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	04 51       	subi	r16, 0x14	; 20
     7a4:	11 09       	sbc	r17, r1
     7a6:	1f 93       	push	r17
     7a8:	0f 93       	push	r16
     7aa:	0e 94 8d 0a 	call	0x151a	; 0x151a <sprintf>
			USART_SendString(buffer);
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <USART_SendString>
	lastErr = errinp;
}

void kalibrasi(int n){
	
	for (int i = 0; i < n; i++){
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	e8 1a       	sub	r14, r24
     7b8:	f8 0a       	sbc	r15, r24
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	ec 14       	cp	r14, r12
     7c8:	fd 04       	cpc	r15, r13
     7ca:	0c f4       	brge	.+2      	; 0x7ce <kalibrasi+0x12e>
     7cc:	7d cf       	rjmp	.-262    	; 0x6c8 <kalibrasi+0x28>
			
			itoa(n, intbuffer, 10);
			sprintf(buffer,"kalibrasi- %s/s\r\n", intbuffer);
			USART_SendString(buffer);
	}
	gyro_x_cal /= n;
     7ce:	0d 2c       	mov	r0, r13
     7d0:	00 0c       	add	r0, r0
     7d2:	ee 08       	sbc	r14, r14
     7d4:	ff 08       	sbc	r15, r15
     7d6:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <gyro_x_cal>
     7da:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <gyro_x_cal+0x1>
     7de:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gyro_x_cal+0x2>
     7e2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <gyro_x_cal+0x3>
     7e6:	a7 01       	movw	r20, r14
     7e8:	96 01       	movw	r18, r12
     7ea:	0e 94 0f 0a 	call	0x141e	; 0x141e <__divmodsi4>
     7ee:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <gyro_x_cal>
     7f2:	30 93 af 01 	sts	0x01AF, r19	; 0x8001af <gyro_x_cal+0x1>
     7f6:	40 93 b0 01 	sts	0x01B0, r20	; 0x8001b0 <gyro_x_cal+0x2>
     7fa:	50 93 b1 01 	sts	0x01B1, r21	; 0x8001b1 <gyro_x_cal+0x3>
	gyro_y_cal /= n;
     7fe:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <gyro_y_cal>
     802:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <gyro_y_cal+0x1>
     806:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gyro_y_cal+0x2>
     80a:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <gyro_y_cal+0x3>
     80e:	a7 01       	movw	r20, r14
     810:	96 01       	movw	r18, r12
     812:	0e 94 0f 0a 	call	0x141e	; 0x141e <__divmodsi4>
     816:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <gyro_y_cal>
     81a:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <gyro_y_cal+0x1>
     81e:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <gyro_y_cal+0x2>
     822:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <gyro_y_cal+0x3>
	gyro_z_cal /= n;
     826:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <gyro_z_cal>
     82a:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <gyro_z_cal+0x1>
     82e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <gyro_z_cal+0x2>
     832:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <gyro_z_cal+0x3>
     836:	a7 01       	movw	r20, r14
     838:	96 01       	movw	r18, r12
     83a:	0e 94 0f 0a 	call	0x141e	; 0x141e <__divmodsi4>
     83e:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <gyro_z_cal>
     842:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <gyro_z_cal+0x1>
     846:	40 93 bc 01 	sts	0x01BC, r20	; 0x8001bc <gyro_z_cal+0x2>
     84a:	50 93 bd 01 	sts	0x01BD, r21	; 0x8001bd <gyro_z_cal+0x3>
}
     84e:	6e 96       	adiw	r28, 0x1e	; 30
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	08 95       	ret

0000086c <PWM_init>:

void PWM_init(){
	DDRB |= (1<<PB1)|(1<<PB2)|(1<<PB3); //set pin menjadi OUTPUT
     86c:	84 b1       	in	r24, 0x04	; 4
     86e:	8e 60       	ori	r24, 0x0E	; 14
     870:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD3)|(1<<PD5)|(1<<PD6);
     872:	8a b1       	in	r24, 0x0a	; 10
     874:	88 66       	ori	r24, 0x68	; 104
     876:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = (1<<COM2A1)|(1<<COM2B1)|(1<<WGM20)|(1<<WGM21);  // Fast PWM mode
     878:	83 ea       	ldi	r24, 0xA3	; 163
     87a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	//mode non-inverting ()
	TCCR2B = (1<<CS22);  // Prescaler 64
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 0;  //  duty cycle
     884:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0;  //  duty cycle
     888:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     88c:	08 95       	ret

0000088e <constrain>:
	
}

int constrain(int val, int min, int max) {
	if (val < min) {
     88e:	86 17       	cp	r24, r22
     890:	97 07       	cpc	r25, r23
     892:	34 f0       	brlt	.+12     	; 0x8a0 <constrain+0x12>
		return min;
		} else if (val > max) {
     894:	48 17       	cp	r20, r24
     896:	59 07       	cpc	r21, r25
     898:	2c f4       	brge	.+10     	; 0x8a4 <constrain+0x16>
		return max;
     89a:	84 2f       	mov	r24, r20
     89c:	95 2f       	mov	r25, r21
     89e:	08 95       	ret
	
}

int constrain(int val, int min, int max) {
	if (val < min) {
		return min;
     8a0:	86 2f       	mov	r24, r22
     8a2:	97 2f       	mov	r25, r23
		} else if (val > max) {
		return max;
		} else {
		return val;
	}
}
     8a4:	08 95       	ret

000008a6 <control_motor>:

void control_motor(float PIDspeedL, float PIDspeedR) {
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	6b 01       	movw	r12, r22
     8b8:	7c 01       	movw	r14, r24
     8ba:	49 01       	movw	r8, r18
     8bc:	5a 01       	movw	r10, r20
	// Kontrol motor kanan
	if (PIDspeedR >= 0) {
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	0e 94 5f 09 	call	0x12be	; 0x12be <__gesf2>
     8cc:	88 23       	and	r24, r24
     8ce:	6c f0       	brlt	.+26     	; 0x8ea <control_motor+0x44>
		OCR2A = PIDspeedR;  // Set duty cycle
     8d0:	c5 01       	movw	r24, r10
     8d2:	b4 01       	movw	r22, r8
     8d4:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fixunssfsi>
     8d8:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		PORTD |= (1<<PD6);  // Motor kanan maju
     8dc:	8b b1       	in	r24, 0x0b	; 11
     8de:	80 64       	ori	r24, 0x40	; 64
     8e0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PD5);
     8e2:	8b b1       	in	r24, 0x0b	; 11
     8e4:	8f 7d       	andi	r24, 0xDF	; 223
     8e6:	8b b9       	out	0x0b, r24	; 11
     8e8:	0d c0       	rjmp	.+26     	; 0x904 <__stack+0x5>
		} else {
		OCR2A = -PIDspeedR;  // Set duty cycle
     8ea:	c5 01       	movw	r24, r10
     8ec:	b4 01       	movw	r22, r8
     8ee:	90 58       	subi	r25, 0x80	; 128
     8f0:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fixunssfsi>
     8f4:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		PORTD &= ~(1<<PD6);  // Motor kanan mundur
     8f8:	8b b1       	in	r24, 0x0b	; 11
     8fa:	8f 7b       	andi	r24, 0xBF	; 191
     8fc:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<PD5);
     8fe:	8b b1       	in	r24, 0x0b	; 11
     900:	80 62       	ori	r24, 0x20	; 32
     902:	8b b9       	out	0x0b, r24	; 11
	}

	// Kontrol motor kiri
	if (PIDspeedL >= 0) {
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	a9 01       	movw	r20, r18
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	0e 94 5f 09 	call	0x12be	; 0x12be <__gesf2>
     912:	88 23       	and	r24, r24
     914:	6c f0       	brlt	.+26     	; 0x930 <__stack+0x31>
		OCR2B = PIDspeedL;  // Set duty cycle
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fixunssfsi>
     91e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		PORTB |= (1<<PB1);  // Motor kiri maju
     922:	85 b1       	in	r24, 0x05	; 5
     924:	82 60       	ori	r24, 0x02	; 2
     926:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PB2);
     928:	85 b1       	in	r24, 0x05	; 5
     92a:	8b 7f       	andi	r24, 0xFB	; 251
     92c:	85 b9       	out	0x05, r24	; 5
     92e:	0d c0       	rjmp	.+26     	; 0x94a <__stack+0x4b>
		} else {
		OCR2B = -PIDspeedL;  // Set duty cycle
     930:	c7 01       	movw	r24, r14
     932:	b6 01       	movw	r22, r12
     934:	90 58       	subi	r25, 0x80	; 128
     936:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fixunssfsi>
     93a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		PORTB &= ~(1<<PB1);  // Motor kiri mundur
     93e:	85 b1       	in	r24, 0x05	; 5
     940:	8d 7f       	andi	r24, 0xFD	; 253
     942:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB2);
     944:	85 b1       	in	r24, 0x05	; 5
     946:	84 60       	ori	r24, 0x04	; 4
     948:	85 b9       	out	0x05, r24	; 5
	}
}
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	df 90       	pop	r13
     950:	cf 90       	pop	r12
     952:	bf 90       	pop	r11
     954:	af 90       	pop	r10
     956:	9f 90       	pop	r9
     958:	8f 90       	pop	r8
     95a:	08 95       	ret

0000095c <main>:


int main()
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	e6 97       	sbiw	r28, 0x36	; 54
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20], buffer2[20], float_[10];
	PWM_init();
     970:	0e 94 36 04 	call	0x86c	; 0x86c <PWM_init>
	I2C_Init();											/* Initialize I2C */
     974:	0e 94 e7 00 	call	0x1ce	; 0x1ce <I2C_Init>
	MPU6050_Init();										/* Initialize MPU6050 */
     978:	0e 94 a5 01 	call	0x34a	; 0x34a <MPU6050_Init>
	USART_Init(9600);									/* Initialize USART with 9600 baud rate */
     97c:	60 e8       	ldi	r22, 0x80	; 128
     97e:	75 e2       	ldi	r23, 0x25	; 37
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 a9 06 	call	0xd52	; 0xd52 <USART_Init>
	kalibrasi(100);									//kalibrasi dengan 1000 data
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <kalibrasi>
	
	while(1)
	{
		Read_RawValue(); //membaca sensor mpu6050
     990:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Read_RawValue>
		
		Gyro_x -= gyro_x_cal;
     994:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <gyro_x_cal>
     998:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <gyro_x_cal+0x1>
     99c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gyro_x_cal+0x2>
     9a0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <gyro_x_cal+0x3>
     9a4:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <Gyro_x>
     9b0:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <Gyro_x+0x1>
     9b4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <Gyro_x+0x2>
     9b8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <Gyro_x+0x3>
     9bc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__subsf3>
     9c0:	6b 01       	movw	r12, r22
     9c2:	7c 01       	movw	r14, r24
		Gyro_y -= gyro_y_cal;
     9c4:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <gyro_y_cal>
     9c8:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <gyro_y_cal+0x1>
     9cc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gyro_y_cal+0x2>
     9d0:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <gyro_y_cal+0x3>
     9d4:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <Gyro_y>
     9e0:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <Gyro_y+0x1>
     9e4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Gyro_y+0x2>
     9e8:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <Gyro_y+0x3>
     9ec:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__subsf3>
     9f0:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <Gyro_y>
     9f4:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <Gyro_y+0x1>
     9f8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <Gyro_y+0x2>
     9fc:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <Gyro_y+0x3>
		Gyro_z -= gyro_z_cal;
     a00:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <gyro_z_cal>
     a04:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <gyro_z_cal+0x1>
     a08:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <gyro_z_cal+0x2>
     a0c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <gyro_z_cal+0x3>
     a10:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <Gyro_z>
     a1c:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <Gyro_z+0x1>
     a20:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <Gyro_z+0x2>
     a24:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <Gyro_z+0x3>
     a28:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__subsf3>
     a2c:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <Gyro_z>
     a30:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <Gyro_z+0x1>
     a34:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <Gyro_z+0x2>
     a38:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <Gyro_z+0x3>
		
		Gyro_x = Gyro_x * 0.611;
     a3c:	2f e7       	ldi	r18, 0x7F	; 127
     a3e:	3a e6       	ldi	r19, 0x6A	; 106
     a40:	4c e1       	ldi	r20, 0x1C	; 28
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     a4c:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <Gyro_x>
     a50:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <Gyro_x+0x1>
     a54:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <Gyro_x+0x2>
     a58:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <Gyro_x+0x3>
		
		angle = alpha * (angle + Gyro_x * 0.01) + (1 - alpha) * (atan2(-Acc_y, Acc_z) * 180.0 / M_PI);
     a5c:	2a e0       	ldi	r18, 0x0A	; 10
     a5e:	37 ed       	ldi	r19, 0xD7	; 215
     a60:	43 e2       	ldi	r20, 0x23	; 35
     a62:	5c e3       	ldi	r21, 0x3C	; 60
     a64:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     a68:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <__data_end>
     a6c:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <__data_end+0x1>
     a70:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <__data_end+0x2>
     a74:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <__data_end+0x3>
     a78:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     a7c:	23 e3       	ldi	r18, 0x33	; 51
     a7e:	33 e3       	ldi	r19, 0x33	; 51
     a80:	43 e7       	ldi	r20, 0x73	; 115
     a82:	5f e3       	ldi	r21, 0x3F	; 63
     a84:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     a88:	6b 01       	movw	r12, r22
     a8a:	7c 01       	movw	r14, r24
     a8c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Acc_y>
     a90:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <Acc_y+0x1>
     a94:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <Acc_y+0x2>
     a98:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <Acc_y+0x3>
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	90 58       	subi	r25, 0x80	; 128
     aa2:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <Acc_z>
     aa6:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <Acc_z+0x1>
     aaa:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <Acc_z+0x2>
     aae:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <Acc_z+0x3>
     ab2:	0e 94 7a 07 	call	0xef4	; 0xef4 <atan2>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	44 e3       	ldi	r20, 0x34	; 52
     abc:	53 e4       	ldi	r21, 0x43	; 67
     abe:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     ac2:	2b ed       	ldi	r18, 0xDB	; 219
     ac4:	3f e0       	ldi	r19, 0x0F	; 15
     ac6:	49 e4       	ldi	r20, 0x49	; 73
     ac8:	50 e4       	ldi	r21, 0x40	; 64
     aca:	0e 94 de 07 	call	0xfbc	; 0xfbc <__divsf3>
     ace:	20 ed       	ldi	r18, 0xD0	; 208
     ad0:	3c ec       	ldi	r19, 0xCC	; 204
     ad2:	4c e4       	ldi	r20, 0x4C	; 76
     ad4:	5d e3       	ldi	r21, 0x3D	; 61
     ad6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     ae6:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <__data_end>
     aea:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <__data_end+0x1>
     aee:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end+0x2>
     af2:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <__data_end+0x3>
		
		Setpoint = -angle;
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	b0 58       	subi	r27, 0x80	; 128
     afc:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <Setpoint>
     b00:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <Setpoint+0x1>
     b04:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <Setpoint+0x2>
     b08:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <Setpoint+0x3>
		
		Compute();
     b0c:	0e 94 a1 02 	call	0x542	; 0x542 <Compute>
		
		Output = map(Output, -30000, 30000, -255, 255);
     b10:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <Output>
     b14:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <Output+0x1>
     b18:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Output+0x2>
     b1c:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Output+0x3>
     b20:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixsfsi>
     b24:	1f 92       	push	r1
     b26:	1f 92       	push	r1
     b28:	1f 92       	push	r1
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	2f 93       	push	r18
     b2e:	aa 24       	eor	r10, r10
     b30:	a3 94       	inc	r10
     b32:	bb 24       	eor	r11, r11
     b34:	ba 94       	dec	r11
     b36:	cb 2c       	mov	r12, r11
     b38:	db 2c       	mov	r13, r11
     b3a:	10 e3       	ldi	r17, 0x30	; 48
     b3c:	e1 2e       	mov	r14, r17
     b3e:	15 e7       	ldi	r17, 0x75	; 117
     b40:	f1 2e       	mov	r15, r17
     b42:	00 e0       	ldi	r16, 0x00	; 0
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	20 ed       	ldi	r18, 0xD0	; 208
     b48:	3a e8       	ldi	r19, 0x8A	; 138
     b4a:	4f ef       	ldi	r20, 0xFF	; 255
     b4c:	5f ef       	ldi	r21, 0xFF	; 255
     b4e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <map>
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     b5e:	6b 01       	movw	r12, r22
     b60:	7c 01       	movw	r14, r24
     b62:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <Output>
     b66:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <Output+0x1>
     b6a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Output+0x2>
     b6e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Output+0x3>
		if(Output > 255){
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	4f e7       	ldi	r20, 0x7F	; 127
     b78:	53 e4       	ldi	r21, 0x43	; 67
     b7a:	0e 94 5f 09 	call	0x12be	; 0x12be <__gesf2>
     b7e:	18 16       	cp	r1, r24
     b80:	6c f4       	brge	.+26     	; 0xb9c <main+0x240>
			Output = 255;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	af e7       	ldi	r26, 0x7F	; 127
     b88:	b3 e4       	ldi	r27, 0x43	; 67
     b8a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Output>
     b8e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <Output+0x1>
     b92:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <Output+0x2>
     b96:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <Output+0x3>
     b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <main+0x26c>
		}
		else if(Output < -255){
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	4f e7       	ldi	r20, 0x7F	; 127
     ba2:	53 ec       	ldi	r21, 0xC3	; 195
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__cmpsf2>
     bac:	88 23       	and	r24, r24
     bae:	64 f4       	brge	.+24     	; 0xbc8 <main+0x26c>
			Output = -255;
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	af e7       	ldi	r26, 0x7F	; 127
     bb6:	b3 ec       	ldi	r27, 0xC3	; 195
     bb8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <Output>
     bbc:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <Output+0x1>
     bc0:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <Output+0x2>
     bc4:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <Output+0x3>
		}
		
		int PIDspeedL = speedL - Output;               // Adjust speeds
     bc8:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <Output>
     bcc:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <Output+0x1>
     bd0:	e0 90 9c 01 	lds	r14, 0x019C	; 0x80019c <Output+0x2>
     bd4:	f0 90 9d 01 	lds	r15, 0x019D	; 0x80019d <Output+0x3>
     bd8:	a7 01       	movw	r20, r14
     bda:	96 01       	movw	r18, r12
     bdc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     be0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     be4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     be8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bec:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__subsf3>
     bf0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixsfsi>
     bf4:	4b 01       	movw	r8, r22
     bf6:	5c 01       	movw	r10, r24
		int PIDspeedR = speedR + Output;
     bf8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <speedR>
     bfc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <speedR+0x1>
     c00:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <speedR+0x2>
     c04:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <speedR+0x3>
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__addsf3>
     c10:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fixsfsi>
     c14:	2b 01       	movw	r4, r22
     c16:	3c 01       	movw	r6, r24
		
		PIDspeedL = constrain(PIDspeedL, 0, 125);
     c18:	4d e7       	ldi	r20, 0x7D	; 125
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	c4 01       	movw	r24, r8
     c22:	0e 94 47 04 	call	0x88e	; 0x88e <constrain>
     c26:	7c 01       	movw	r14, r24
		PIDspeedR = constrain(PIDspeedR, 0, 125);
     c28:	4d e7       	ldi	r20, 0x7D	; 125
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	c2 01       	movw	r24, r4
     c32:	0e 94 47 04 	call	0x88e	; 0x88e <constrain>
		
		control_motor(PIDspeedL, PIDspeedR);
     c36:	bc 01       	movw	r22, r24
     c38:	99 0f       	add	r25, r25
     c3a:	88 0b       	sbc	r24, r24
     c3c:	99 0b       	sbc	r25, r25
     c3e:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     c42:	2b 01       	movw	r4, r22
     c44:	3c 01       	movw	r6, r24
     c46:	b7 01       	movw	r22, r14
     c48:	ff 0c       	add	r15, r15
     c4a:	88 0b       	sbc	r24, r24
     c4c:	99 0b       	sbc	r25, r25
     c4e:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatsisf>
     c52:	6b ab       	std	Y+51, r22	; 0x33
     c54:	7c ab       	std	Y+52, r23	; 0x34
     c56:	8d ab       	std	Y+53, r24	; 0x35
     c58:	9e ab       	std	Y+54, r25	; 0x36
     c5a:	a3 01       	movw	r20, r6
     c5c:	92 01       	movw	r18, r4
     c5e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <control_motor>
		
		dtostrf( Gyro_x, 3, 2, float_ );
     c62:	7e 01       	movw	r14, r28
     c64:	89 e2       	ldi	r24, 0x29	; 41
     c66:	e8 0e       	add	r14, r24
     c68:	f1 1c       	adc	r15, r1
     c6a:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <Gyro_x>
     c6e:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <Gyro_x+0x1>
     c72:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <Gyro_x+0x2>
     c76:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <Gyro_x+0x3>
     c7a:	87 01       	movw	r16, r14
     c7c:	22 e0       	ldi	r18, 0x02	; 2
     c7e:	43 e0       	ldi	r20, 0x03	; 3
     c80:	0e 94 48 0a 	call	0x1490	; 0x1490 <dtostrf>
		sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);
     c84:	1f 92       	push	r1
     c86:	0f 2e       	mov	r0, r31
     c88:	f8 ef       	ldi	r31, 0xF8	; 248
     c8a:	bf 2e       	mov	r11, r31
     c8c:	f0 2d       	mov	r31, r0
     c8e:	bf 92       	push	r11
     c90:	ff 92       	push	r15
     c92:	ef 92       	push	r14
     c94:	86 e2       	ldi	r24, 0x26	; 38
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	6c 01       	movw	r12, r24
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	0e 94 8d 0a 	call	0x151a	; 0x151a <sprintf>
		USART_SendString(buffer);
     caa:	c6 01       	movw	r24, r12
     cac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <USART_SendString>
		
		dtostrf( Output, 3, 2, float_ );
     cb0:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <Output>
     cb4:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <Output+0x1>
     cb8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Output+0x2>
     cbc:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Output+0x3>
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	43 e0       	ldi	r20, 0x03	; 3
     cc4:	0e 94 48 0a 	call	0x1490	; 0x1490 <dtostrf>
		sprintf(buffer," pid = %s%c/s\t",float_,0xF8);
     cc8:	1f 92       	push	r1
     cca:	bf 92       	push	r11
     ccc:	ff 92       	push	r15
     cce:	ef 92       	push	r14
     cd0:	84 e3       	ldi	r24, 0x34	; 52
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	df 92       	push	r13
     cda:	cf 92       	push	r12
     cdc:	0e 94 8d 0a 	call	0x151a	; 0x151a <sprintf>
		USART_SendString(buffer);
     ce0:	c6 01       	movw	r24, r12
     ce2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <USART_SendString>
		
		dtostrf( PIDspeedL, 3, 2, float_ );
     ce6:	22 e0       	ldi	r18, 0x02	; 2
     ce8:	43 e0       	ldi	r20, 0x03	; 3
     cea:	6b a9       	ldd	r22, Y+51	; 0x33
     cec:	7c a9       	ldd	r23, Y+52	; 0x34
     cee:	8d a9       	ldd	r24, Y+53	; 0x35
     cf0:	9e a9       	ldd	r25, Y+54	; 0x36
     cf2:	0e 94 48 0a 	call	0x1490	; 0x1490 <dtostrf>
		sprintf(buffer," PIDspeedL = %s%c/s\t",float_,0xF8);
     cf6:	1f 92       	push	r1
     cf8:	bf 92       	push	r11
     cfa:	ff 92       	push	r15
     cfc:	ef 92       	push	r14
     cfe:	83 e4       	ldi	r24, 0x43	; 67
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	df 92       	push	r13
     d08:	cf 92       	push	r12
     d0a:	0e 94 8d 0a 	call	0x151a	; 0x151a <sprintf>
		USART_SendString(buffer);
     d0e:	c6 01       	movw	r24, r12
     d10:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <USART_SendString>
		
		dtostrf( PIDspeedR, 3, 2, float_ );
     d14:	22 e0       	ldi	r18, 0x02	; 2
     d16:	43 e0       	ldi	r20, 0x03	; 3
     d18:	c3 01       	movw	r24, r6
     d1a:	b2 01       	movw	r22, r4
     d1c:	0e 94 48 0a 	call	0x1490	; 0x1490 <dtostrf>
		sprintf(buffer2," PIDspeedR = %s%c/s\r\n",float_,0xF8);
     d20:	1f 92       	push	r1
     d22:	bf 92       	push	r11
     d24:	ff 92       	push	r15
     d26:	ef 92       	push	r14
     d28:	88 e5       	ldi	r24, 0x58	; 88
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	9f 93       	push	r25
     d2e:	8f 93       	push	r24
     d30:	7e 01       	movw	r14, r28
     d32:	95 e1       	ldi	r25, 0x15	; 21
     d34:	e9 0e       	add	r14, r25
     d36:	f1 1c       	adc	r15, r1
     d38:	ff 92       	push	r15
     d3a:	ef 92       	push	r14
     d3c:	0e 94 8d 0a 	call	0x151a	; 0x151a <sprintf>
		USART_SendString(buffer2);
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	c7 01       	movw	r24, r14
     d4c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <USART_SendString>
	}
     d50:	1f ce       	rjmp	.-962    	; 0x990 <main+0x34>

00000d52 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */ 
}
     d52:	e1 ec       	ldi	r30, 0xC1	; 193
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	20 81       	ld	r18, Z
     d58:	28 61       	ori	r18, 0x18	; 24
     d5a:	20 83       	st	Z, r18
     d5c:	e2 ec       	ldi	r30, 0xC2	; 194
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	20 81       	ld	r18, Z
     d62:	2e 60       	ori	r18, 0x0E	; 14
     d64:	20 83       	st	Z, r18
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	aa 1f       	adc	r26, r26
     d70:	bb 1f       	adc	r27, r27
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	aa 1f       	adc	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	9c 01       	movw	r18, r24
     d7c:	ad 01       	movw	r20, r26
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	44 1f       	adc	r20, r20
     d84:	55 1f       	adc	r21, r21
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	44 1f       	adc	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	74 e2       	ldi	r23, 0x24	; 36
     d92:	84 ef       	ldi	r24, 0xF4	; 244
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 ed 09 	call	0x13da	; 0x13da <__udivmodsi4>
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	82 0f       	add	r24, r18
     d9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     da2:	da 01       	movw	r26, r20
     da4:	c9 01       	movw	r24, r18
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	a1 09       	sbc	r26, r1
     daa:	b1 09       	sbc	r27, r1
     dac:	89 2f       	mov	r24, r25
     dae:	9a 2f       	mov	r25, r26
     db0:	ab 2f       	mov	r26, r27
     db2:	bb 27       	eor	r27, r27
     db4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     db8:	08 95       	ret

00000dba <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
     dba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     dbe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     dc2:	85 ff       	sbrs	r24, 5
     dc4:	fc cf       	rjmp	.-8      	; 0xdbe <USART_TxChar+0x4>
}
     dc6:	08 95       	ret

00000dc8 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	8c 01       	movw	r16, r24
	int i=0;																	
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     dd8:	0e 94 dd 06 	call	0xdba	; 0xdba <USART_TxChar>
		i++;
     ddc:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     dde:	f8 01       	movw	r30, r16
     de0:	ec 0f       	add	r30, r28
     de2:	fd 1f       	adc	r31, r29
     de4:	80 81       	ld	r24, Z
     de6:	81 11       	cpse	r24, r1
     de8:	f7 cf       	rjmp	.-18     	; 0xdd8 <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <__subsf3>:
     df4:	50 58       	subi	r21, 0x80	; 128

00000df6 <__addsf3>:
     df6:	bb 27       	eor	r27, r27
     df8:	aa 27       	eor	r26, r26
     dfa:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3x>
     dfe:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
     e02:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
     e06:	38 f0       	brcs	.+14     	; 0xe16 <__addsf3+0x20>
     e08:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__addsf3+0x20>
     e0e:	39 f4       	brne	.+14     	; 0xe1e <__addsf3+0x28>
     e10:	9f 3f       	cpi	r25, 0xFF	; 255
     e12:	19 f4       	brne	.+6      	; 0xe1a <__addsf3+0x24>
     e14:	26 f4       	brtc	.+8      	; 0xe1e <__addsf3+0x28>
     e16:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_nan>
     e1a:	0e f4       	brtc	.+2      	; 0xe1e <__addsf3+0x28>
     e1c:	e0 95       	com	r30
     e1e:	e7 fb       	bst	r30, 7
     e20:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_inf>

00000e24 <__addsf3x>:
     e24:	e9 2f       	mov	r30, r25
     e26:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
     e2a:	58 f3       	brcs	.-42     	; 0xe02 <__addsf3+0xc>
     e2c:	ba 17       	cp	r27, r26
     e2e:	62 07       	cpc	r22, r18
     e30:	73 07       	cpc	r23, r19
     e32:	84 07       	cpc	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	20 f0       	brcs	.+8      	; 0xe40 <__addsf3x+0x1c>
     e38:	79 f4       	brne	.+30     	; 0xe58 <__addsf3x+0x34>
     e3a:	a6 f5       	brtc	.+104    	; 0xea4 <__addsf3x+0x80>
     e3c:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
     e40:	0e f4       	brtc	.+2      	; 0xe44 <__addsf3x+0x20>
     e42:	e0 95       	com	r30
     e44:	0b 2e       	mov	r0, r27
     e46:	ba 2f       	mov	r27, r26
     e48:	a0 2d       	mov	r26, r0
     e4a:	0b 01       	movw	r0, r22
     e4c:	b9 01       	movw	r22, r18
     e4e:	90 01       	movw	r18, r0
     e50:	0c 01       	movw	r0, r24
     e52:	ca 01       	movw	r24, r20
     e54:	a0 01       	movw	r20, r0
     e56:	11 24       	eor	r1, r1
     e58:	ff 27       	eor	r31, r31
     e5a:	59 1b       	sub	r21, r25
     e5c:	99 f0       	breq	.+38     	; 0xe84 <__addsf3x+0x60>
     e5e:	59 3f       	cpi	r21, 0xF9	; 249
     e60:	50 f4       	brcc	.+20     	; 0xe76 <__addsf3x+0x52>
     e62:	50 3e       	cpi	r21, 0xE0	; 224
     e64:	68 f1       	brcs	.+90     	; 0xec0 <__addsf3x+0x9c>
     e66:	1a 16       	cp	r1, r26
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	a2 2f       	mov	r26, r18
     e6c:	23 2f       	mov	r18, r19
     e6e:	34 2f       	mov	r19, r20
     e70:	44 27       	eor	r20, r20
     e72:	58 5f       	subi	r21, 0xF8	; 248
     e74:	f3 cf       	rjmp	.-26     	; 0xe5c <__addsf3x+0x38>
     e76:	46 95       	lsr	r20
     e78:	37 95       	ror	r19
     e7a:	27 95       	ror	r18
     e7c:	a7 95       	ror	r26
     e7e:	f0 40       	sbci	r31, 0x00	; 0
     e80:	53 95       	inc	r21
     e82:	c9 f7       	brne	.-14     	; 0xe76 <__addsf3x+0x52>
     e84:	7e f4       	brtc	.+30     	; 0xea4 <__addsf3x+0x80>
     e86:	1f 16       	cp	r1, r31
     e88:	ba 0b       	sbc	r27, r26
     e8a:	62 0b       	sbc	r22, r18
     e8c:	73 0b       	sbc	r23, r19
     e8e:	84 0b       	sbc	r24, r20
     e90:	ba f0       	brmi	.+46     	; 0xec0 <__addsf3x+0x9c>
     e92:	91 50       	subi	r25, 0x01	; 1
     e94:	a1 f0       	breq	.+40     	; 0xebe <__addsf3x+0x9a>
     e96:	ff 0f       	add	r31, r31
     e98:	bb 1f       	adc	r27, r27
     e9a:	66 1f       	adc	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	c2 f7       	brpl	.-16     	; 0xe92 <__addsf3x+0x6e>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <__addsf3x+0x9c>
     ea4:	ba 0f       	add	r27, r26
     ea6:	62 1f       	adc	r22, r18
     ea8:	73 1f       	adc	r23, r19
     eaa:	84 1f       	adc	r24, r20
     eac:	48 f4       	brcc	.+18     	; 0xec0 <__addsf3x+0x9c>
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f7 95       	ror	r31
     eb8:	9e 3f       	cpi	r25, 0xFE	; 254
     eba:	08 f0       	brcs	.+2      	; 0xebe <__addsf3x+0x9a>
     ebc:	b0 cf       	rjmp	.-160    	; 0xe1e <__addsf3+0x28>
     ebe:	93 95       	inc	r25
     ec0:	88 0f       	add	r24, r24
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0xa2>
     ec4:	99 27       	eor	r25, r25
     ec6:	ee 0f       	add	r30, r30
     ec8:	97 95       	ror	r25
     eca:	87 95       	ror	r24
     ecc:	08 95       	ret
     ece:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
     ed2:	60 f0       	brcs	.+24     	; 0xeec <__addsf3x+0xc8>
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	09 f4       	brne	.+2      	; 0xedc <__addsf3x+0xb8>
     eda:	9e ef       	ldi	r25, 0xFE	; 254
     edc:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
     ee0:	28 f0       	brcs	.+10     	; 0xeec <__addsf3x+0xc8>
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	51 e0       	ldi	r21, 0x01	; 1
     ee6:	71 f4       	brne	.+28     	; 0xf04 <atan2+0x10>
     ee8:	5e ef       	ldi	r21, 0xFE	; 254
     eea:	0c c0       	rjmp	.+24     	; 0xf04 <atan2+0x10>
     eec:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_nan>
     ef0:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>

00000ef4 <atan2>:
     ef4:	e9 2f       	mov	r30, r25
     ef6:	e0 78       	andi	r30, 0x80	; 128
     ef8:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
     efc:	40 f3       	brcs	.-48     	; 0xece <__addsf3x+0xaa>
     efe:	09 2e       	mov	r0, r25
     f00:	05 2a       	or	r0, r21
     f02:	b1 f3       	breq	.-20     	; 0xef0 <__addsf3x+0xcc>
     f04:	26 17       	cp	r18, r22
     f06:	37 07       	cpc	r19, r23
     f08:	48 07       	cpc	r20, r24
     f0a:	59 07       	cpc	r21, r25
     f0c:	38 f0       	brcs	.+14     	; 0xf1c <atan2+0x28>
     f0e:	0e 2e       	mov	r0, r30
     f10:	07 f8       	bld	r0, 7
     f12:	e0 25       	eor	r30, r0
     f14:	69 f0       	breq	.+26     	; 0xf30 <atan2+0x3c>
     f16:	e0 25       	eor	r30, r0
     f18:	e0 64       	ori	r30, 0x40	; 64
     f1a:	0a c0       	rjmp	.+20     	; 0xf30 <atan2+0x3c>
     f1c:	ef 63       	ori	r30, 0x3F	; 63
     f1e:	07 f8       	bld	r0, 7
     f20:	00 94       	com	r0
     f22:	07 fa       	bst	r0, 7
     f24:	db 01       	movw	r26, r22
     f26:	b9 01       	movw	r22, r18
     f28:	9d 01       	movw	r18, r26
     f2a:	dc 01       	movw	r26, r24
     f2c:	ca 01       	movw	r24, r20
     f2e:	ad 01       	movw	r20, r26
     f30:	ef 93       	push	r30
     f32:	0e 94 f5 07 	call	0xfea	; 0xfea <__divsf3_pse>
     f36:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_round>
     f3a:	0e 94 aa 07 	call	0xf54	; 0xf54 <atan>
     f3e:	5f 91       	pop	r21
     f40:	55 23       	and	r21, r21
     f42:	39 f0       	breq	.+14     	; 0xf52 <atan2+0x5e>
     f44:	2b ed       	ldi	r18, 0xDB	; 219
     f46:	3f e0       	ldi	r19, 0x0F	; 15
     f48:	49 e4       	ldi	r20, 0x49	; 73
     f4a:	50 fd       	sbrc	r21, 0
     f4c:	49 ec       	ldi	r20, 0xC9	; 201
     f4e:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__addsf3>
     f52:	08 95       	ret

00000f54 <atan>:
     f54:	df 93       	push	r29
     f56:	dd 27       	eor	r29, r29
     f58:	b9 2f       	mov	r27, r25
     f5a:	bf 77       	andi	r27, 0x7F	; 127
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	48 07       	cpc	r20, r24
     f66:	5b 07       	cpc	r21, r27
     f68:	18 f4       	brcc	.+6      	; 0xf70 <atan+0x1c>
     f6a:	d9 2f       	mov	r29, r25
     f6c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <inverse>
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	7f 93       	push	r23
     f76:	6f 93       	push	r22
     f78:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <square>
     f7c:	e8 e6       	ldi	r30, 0x68	; 104
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__fp_powser>
     f84:	0e 94 25 09 	call	0x124a	; 0x124a <__fp_round>
     f88:	2f 91       	pop	r18
     f8a:	3f 91       	pop	r19
     f8c:	4f 91       	pop	r20
     f8e:	5f 91       	pop	r21
     f90:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__mulsf3x>
     f94:	dd 23       	and	r29, r29
     f96:	51 f0       	breq	.+20     	; 0xfac <atan+0x58>
     f98:	90 58       	subi	r25, 0x80	; 128
     f9a:	a2 ea       	ldi	r26, 0xA2	; 162
     f9c:	2a ed       	ldi	r18, 0xDA	; 218
     f9e:	3f e0       	ldi	r19, 0x0F	; 15
     fa0:	49 ec       	ldi	r20, 0xC9	; 201
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	d0 78       	andi	r29, 0x80	; 128
     fa6:	5d 27       	eor	r21, r29
     fa8:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3x>
     fac:	df 91       	pop	r29
     fae:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>

00000fb2 <__cmpsf2>:
     fb2:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_cmp>
     fb6:	08 f4       	brcc	.+2      	; 0xfba <__cmpsf2+0x8>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 95       	ret

00000fbc <__divsf3>:
     fbc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3x>
     fc0:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
     fc4:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
     fc8:	58 f0       	brcs	.+22     	; 0xfe0 <__divsf3+0x24>
     fca:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
     fce:	40 f0       	brcs	.+16     	; 0xfe0 <__divsf3+0x24>
     fd0:	29 f4       	brne	.+10     	; 0xfdc <__divsf3+0x20>
     fd2:	5f 3f       	cpi	r21, 0xFF	; 255
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <__divsf3+0x24>
     fd6:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_inf>
     fda:	51 11       	cpse	r21, r1
     fdc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
     fe0:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_nan>

00000fe4 <__divsf3x>:
     fe4:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
     fe8:	68 f3       	brcs	.-38     	; 0xfc4 <__divsf3+0x8>

00000fea <__divsf3_pse>:
     fea:	99 23       	and	r25, r25
     fec:	b1 f3       	breq	.-20     	; 0xfda <__divsf3+0x1e>
     fee:	55 23       	and	r21, r21
     ff0:	91 f3       	breq	.-28     	; 0xfd6 <__divsf3+0x1a>
     ff2:	95 1b       	sub	r25, r21
     ff4:	55 0b       	sbc	r21, r21
     ff6:	bb 27       	eor	r27, r27
     ff8:	aa 27       	eor	r26, r26
     ffa:	62 17       	cp	r22, r18
     ffc:	73 07       	cpc	r23, r19
     ffe:	84 07       	cpc	r24, r20
    1000:	38 f0       	brcs	.+14     	; 0x1010 <__divsf3_pse+0x26>
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	44 1f       	adc	r20, r20
    100c:	aa 1f       	adc	r26, r26
    100e:	a9 f3       	breq	.-22     	; 0xffa <__divsf3_pse+0x10>
    1010:	35 d0       	rcall	.+106    	; 0x107c <__divsf3_pse+0x92>
    1012:	0e 2e       	mov	r0, r30
    1014:	3a f0       	brmi	.+14     	; 0x1024 <__divsf3_pse+0x3a>
    1016:	e0 e8       	ldi	r30, 0x80	; 128
    1018:	32 d0       	rcall	.+100    	; 0x107e <__divsf3_pse+0x94>
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	e6 95       	lsr	r30
    1020:	00 1c       	adc	r0, r0
    1022:	ca f7       	brpl	.-14     	; 0x1016 <__divsf3_pse+0x2c>
    1024:	2b d0       	rcall	.+86     	; 0x107c <__divsf3_pse+0x92>
    1026:	fe 2f       	mov	r31, r30
    1028:	29 d0       	rcall	.+82     	; 0x107c <__divsf3_pse+0x92>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	bb 1f       	adc	r27, r27
    1032:	26 17       	cp	r18, r22
    1034:	37 07       	cpc	r19, r23
    1036:	48 07       	cpc	r20, r24
    1038:	ab 07       	cpc	r26, r27
    103a:	b0 e8       	ldi	r27, 0x80	; 128
    103c:	09 f0       	breq	.+2      	; 0x1040 <__divsf3_pse+0x56>
    103e:	bb 0b       	sbc	r27, r27
    1040:	80 2d       	mov	r24, r0
    1042:	bf 01       	movw	r22, r30
    1044:	ff 27       	eor	r31, r31
    1046:	93 58       	subi	r25, 0x83	; 131
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	3a f0       	brmi	.+14     	; 0x105a <__divsf3_pse+0x70>
    104c:	9e 3f       	cpi	r25, 0xFE	; 254
    104e:	51 05       	cpc	r21, r1
    1050:	78 f0       	brcs	.+30     	; 0x1070 <__divsf3_pse+0x86>
    1052:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_inf>
    1056:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    105a:	5f 3f       	cpi	r21, 0xFF	; 255
    105c:	e4 f3       	brlt	.-8      	; 0x1056 <__divsf3_pse+0x6c>
    105e:	98 3e       	cpi	r25, 0xE8	; 232
    1060:	d4 f3       	brlt	.-12     	; 0x1056 <__divsf3_pse+0x6c>
    1062:	86 95       	lsr	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	b7 95       	ror	r27
    106a:	f7 95       	ror	r31
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	c9 f7       	brne	.-14     	; 0x1062 <__divsf3_pse+0x78>
    1070:	88 0f       	add	r24, r24
    1072:	91 1d       	adc	r25, r1
    1074:	96 95       	lsr	r25
    1076:	87 95       	ror	r24
    1078:	97 f9       	bld	r25, 7
    107a:	08 95       	ret
    107c:	e1 e0       	ldi	r30, 0x01	; 1
    107e:	66 0f       	add	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	bb 1f       	adc	r27, r27
    1086:	62 17       	cp	r22, r18
    1088:	73 07       	cpc	r23, r19
    108a:	84 07       	cpc	r24, r20
    108c:	ba 07       	cpc	r27, r26
    108e:	20 f0       	brcs	.+8      	; 0x1098 <__divsf3_pse+0xae>
    1090:	62 1b       	sub	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	ba 0b       	sbc	r27, r26
    1098:	ee 1f       	adc	r30, r30
    109a:	88 f7       	brcc	.-30     	; 0x107e <__divsf3_pse+0x94>
    109c:	e0 95       	com	r30
    109e:	08 95       	ret

000010a0 <__fixsfsi>:
    10a0:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fixunssfsi>
    10a4:	68 94       	set
    10a6:	b1 11       	cpse	r27, r1
    10a8:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    10ac:	08 95       	ret

000010ae <__fixunssfsi>:
    10ae:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    10b2:	88 f0       	brcs	.+34     	; 0x10d6 <__fixunssfsi+0x28>
    10b4:	9f 57       	subi	r25, 0x7F	; 127
    10b6:	98 f0       	brcs	.+38     	; 0x10de <__fixunssfsi+0x30>
    10b8:	b9 2f       	mov	r27, r25
    10ba:	99 27       	eor	r25, r25
    10bc:	b7 51       	subi	r27, 0x17	; 23
    10be:	b0 f0       	brcs	.+44     	; 0x10ec <__fixunssfsi+0x3e>
    10c0:	e1 f0       	breq	.+56     	; 0x10fa <__fixunssfsi+0x4c>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	1a f0       	brmi	.+6      	; 0x10d2 <__fixunssfsi+0x24>
    10cc:	ba 95       	dec	r27
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <__fixunssfsi+0x14>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <__fixunssfsi+0x4c>
    10d2:	b1 30       	cpi	r27, 0x01	; 1
    10d4:	91 f0       	breq	.+36     	; 0x10fa <__fixunssfsi+0x4c>
    10d6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fp_zero>
    10da:	b1 e0       	ldi	r27, 0x01	; 1
    10dc:	08 95       	ret
    10de:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
    10e2:	67 2f       	mov	r22, r23
    10e4:	78 2f       	mov	r23, r24
    10e6:	88 27       	eor	r24, r24
    10e8:	b8 5f       	subi	r27, 0xF8	; 248
    10ea:	39 f0       	breq	.+14     	; 0x10fa <__fixunssfsi+0x4c>
    10ec:	b9 3f       	cpi	r27, 0xF9	; 249
    10ee:	cc f3       	brlt	.-14     	; 0x10e2 <__fixunssfsi+0x34>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b3 95       	inc	r27
    10f8:	d9 f7       	brne	.-10     	; 0x10f0 <__fixunssfsi+0x42>
    10fa:	3e f4       	brtc	.+14     	; 0x110a <__fixunssfsi+0x5c>
    10fc:	90 95       	com	r25
    10fe:	80 95       	com	r24
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__floatunsisf>:
    110c:	e8 94       	clt
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <__floatsisf+0x12>

00001110 <__floatsisf>:
    1110:	97 fb       	bst	r25, 7
    1112:	3e f4       	brtc	.+14     	; 0x1122 <__floatsisf+0x12>
    1114:	90 95       	com	r25
    1116:	80 95       	com	r24
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	99 23       	and	r25, r25
    1124:	a9 f0       	breq	.+42     	; 0x1150 <__floatsisf+0x40>
    1126:	f9 2f       	mov	r31, r25
    1128:	96 e9       	ldi	r25, 0x96	; 150
    112a:	bb 27       	eor	r27, r27
    112c:	93 95       	inc	r25
    112e:	f6 95       	lsr	r31
    1130:	87 95       	ror	r24
    1132:	77 95       	ror	r23
    1134:	67 95       	ror	r22
    1136:	b7 95       	ror	r27
    1138:	f1 11       	cpse	r31, r1
    113a:	f8 cf       	rjmp	.-16     	; 0x112c <__floatsisf+0x1c>
    113c:	fa f4       	brpl	.+62     	; 0x117c <__floatsisf+0x6c>
    113e:	bb 0f       	add	r27, r27
    1140:	11 f4       	brne	.+4      	; 0x1146 <__floatsisf+0x36>
    1142:	60 ff       	sbrs	r22, 0
    1144:	1b c0       	rjmp	.+54     	; 0x117c <__floatsisf+0x6c>
    1146:	6f 5f       	subi	r22, 0xFF	; 255
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	16 c0       	rjmp	.+44     	; 0x117c <__floatsisf+0x6c>
    1150:	88 23       	and	r24, r24
    1152:	11 f0       	breq	.+4      	; 0x1158 <__floatsisf+0x48>
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	11 c0       	rjmp	.+34     	; 0x117a <__floatsisf+0x6a>
    1158:	77 23       	and	r23, r23
    115a:	21 f0       	breq	.+8      	; 0x1164 <__floatsisf+0x54>
    115c:	9e e8       	ldi	r25, 0x8E	; 142
    115e:	87 2f       	mov	r24, r23
    1160:	76 2f       	mov	r23, r22
    1162:	05 c0       	rjmp	.+10     	; 0x116e <__floatsisf+0x5e>
    1164:	66 23       	and	r22, r22
    1166:	71 f0       	breq	.+28     	; 0x1184 <__floatsisf+0x74>
    1168:	96 e8       	ldi	r25, 0x86	; 134
    116a:	86 2f       	mov	r24, r22
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	2a f0       	brmi	.+10     	; 0x117c <__floatsisf+0x6c>
    1172:	9a 95       	dec	r25
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	da f7       	brpl	.-10     	; 0x1172 <__floatsisf+0x62>
    117c:	88 0f       	add	r24, r24
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret

00001186 <__fp_cmp>:
    1186:	99 0f       	add	r25, r25
    1188:	00 08       	sbc	r0, r0
    118a:	55 0f       	add	r21, r21
    118c:	aa 0b       	sbc	r26, r26
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	fe ef       	ldi	r31, 0xFE	; 254
    1192:	16 16       	cp	r1, r22
    1194:	17 06       	cpc	r1, r23
    1196:	e8 07       	cpc	r30, r24
    1198:	f9 07       	cpc	r31, r25
    119a:	c0 f0       	brcs	.+48     	; 0x11cc <__fp_cmp+0x46>
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	98 f0       	brcs	.+38     	; 0x11cc <__fp_cmp+0x46>
    11a6:	62 1b       	sub	r22, r18
    11a8:	73 0b       	sbc	r23, r19
    11aa:	84 0b       	sbc	r24, r20
    11ac:	95 0b       	sbc	r25, r21
    11ae:	39 f4       	brne	.+14     	; 0x11be <__fp_cmp+0x38>
    11b0:	0a 26       	eor	r0, r26
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__fp_cmp+0x46>
    11b4:	23 2b       	or	r18, r19
    11b6:	24 2b       	or	r18, r20
    11b8:	25 2b       	or	r18, r21
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <__fp_cmp+0x3e>
    11bc:	08 95       	ret
    11be:	0a 26       	eor	r0, r26
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__fp_cmp+0x3e>
    11c2:	a1 40       	sbci	r26, 0x01	; 1
    11c4:	a6 95       	lsr	r26
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	81 1d       	adc	r24, r1
    11ca:	81 1d       	adc	r24, r1
    11cc:	08 95       	ret

000011ce <__fp_inf>:
    11ce:	97 f9       	bld	r25, 7
    11d0:	9f 67       	ori	r25, 0x7F	; 127
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	08 95       	ret

000011da <__fp_nan>:
    11da:	9f ef       	ldi	r25, 0xFF	; 255
    11dc:	80 ec       	ldi	r24, 0xC0	; 192
    11de:	08 95       	ret

000011e0 <__fp_powser>:
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	1f 93       	push	r17
    11e6:	0f 93       	push	r16
    11e8:	ff 92       	push	r15
    11ea:	ef 92       	push	r14
    11ec:	df 92       	push	r13
    11ee:	7b 01       	movw	r14, r22
    11f0:	8c 01       	movw	r16, r24
    11f2:	68 94       	set
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <__fp_powser+0x22>
    11f6:	da 2e       	mov	r13, r26
    11f8:	ef 01       	movw	r28, r30
    11fa:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__mulsf3x>
    11fe:	fe 01       	movw	r30, r28
    1200:	e8 94       	clt
    1202:	a5 91       	lpm	r26, Z+
    1204:	25 91       	lpm	r18, Z+
    1206:	35 91       	lpm	r19, Z+
    1208:	45 91       	lpm	r20, Z+
    120a:	55 91       	lpm	r21, Z+
    120c:	a6 f3       	brts	.-24     	; 0x11f6 <__fp_powser+0x16>
    120e:	ef 01       	movw	r28, r30
    1210:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3x>
    1214:	fe 01       	movw	r30, r28
    1216:	97 01       	movw	r18, r14
    1218:	a8 01       	movw	r20, r16
    121a:	da 94       	dec	r13
    121c:	69 f7       	brne	.-38     	; 0x11f8 <__fp_powser+0x18>
    121e:	df 90       	pop	r13
    1220:	ef 90       	pop	r14
    1222:	ff 90       	pop	r15
    1224:	0f 91       	pop	r16
    1226:	1f 91       	pop	r17
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <__fp_pscA>:
    122e:	00 24       	eor	r0, r0
    1230:	0a 94       	dec	r0
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	09 06       	cpc	r0, r25
    123a:	08 95       	ret

0000123c <__fp_pscB>:
    123c:	00 24       	eor	r0, r0
    123e:	0a 94       	dec	r0
    1240:	12 16       	cp	r1, r18
    1242:	13 06       	cpc	r1, r19
    1244:	14 06       	cpc	r1, r20
    1246:	05 06       	cpc	r0, r21
    1248:	08 95       	ret

0000124a <__fp_round>:
    124a:	09 2e       	mov	r0, r25
    124c:	03 94       	inc	r0
    124e:	00 0c       	add	r0, r0
    1250:	11 f4       	brne	.+4      	; 0x1256 <__fp_round+0xc>
    1252:	88 23       	and	r24, r24
    1254:	52 f0       	brmi	.+20     	; 0x126a <__fp_round+0x20>
    1256:	bb 0f       	add	r27, r27
    1258:	40 f4       	brcc	.+16     	; 0x126a <__fp_round+0x20>
    125a:	bf 2b       	or	r27, r31
    125c:	11 f4       	brne	.+4      	; 0x1262 <__fp_round+0x18>
    125e:	60 ff       	sbrs	r22, 0
    1260:	04 c0       	rjmp	.+8      	; 0x126a <__fp_round+0x20>
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	08 95       	ret

0000126c <__fp_split3>:
    126c:	57 fd       	sbrc	r21, 7
    126e:	90 58       	subi	r25, 0x80	; 128
    1270:	44 0f       	add	r20, r20
    1272:	55 1f       	adc	r21, r21
    1274:	59 f0       	breq	.+22     	; 0x128c <__fp_splitA+0x10>
    1276:	5f 3f       	cpi	r21, 0xFF	; 255
    1278:	71 f0       	breq	.+28     	; 0x1296 <__fp_splitA+0x1a>
    127a:	47 95       	ror	r20

0000127c <__fp_splitA>:
    127c:	88 0f       	add	r24, r24
    127e:	97 fb       	bst	r25, 7
    1280:	99 1f       	adc	r25, r25
    1282:	61 f0       	breq	.+24     	; 0x129c <__fp_splitA+0x20>
    1284:	9f 3f       	cpi	r25, 0xFF	; 255
    1286:	79 f0       	breq	.+30     	; 0x12a6 <__fp_splitA+0x2a>
    1288:	87 95       	ror	r24
    128a:	08 95       	ret
    128c:	12 16       	cp	r1, r18
    128e:	13 06       	cpc	r1, r19
    1290:	14 06       	cpc	r1, r20
    1292:	55 1f       	adc	r21, r21
    1294:	f2 cf       	rjmp	.-28     	; 0x127a <__fp_split3+0xe>
    1296:	46 95       	lsr	r20
    1298:	f1 df       	rcall	.-30     	; 0x127c <__fp_splitA>
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <__fp_splitA+0x30>
    129c:	16 16       	cp	r1, r22
    129e:	17 06       	cpc	r1, r23
    12a0:	18 06       	cpc	r1, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	f1 cf       	rjmp	.-30     	; 0x1288 <__fp_splitA+0xc>
    12a6:	86 95       	lsr	r24
    12a8:	71 05       	cpc	r23, r1
    12aa:	61 05       	cpc	r22, r1
    12ac:	08 94       	sec
    12ae:	08 95       	ret

000012b0 <__fp_zero>:
    12b0:	e8 94       	clt

000012b2 <__fp_szero>:
    12b2:	bb 27       	eor	r27, r27
    12b4:	66 27       	eor	r22, r22
    12b6:	77 27       	eor	r23, r23
    12b8:	cb 01       	movw	r24, r22
    12ba:	97 f9       	bld	r25, 7
    12bc:	08 95       	ret

000012be <__gesf2>:
    12be:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_cmp>
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <__gesf2+0x8>
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	08 95       	ret

000012c8 <inverse>:
    12c8:	9b 01       	movw	r18, r22
    12ca:	ac 01       	movw	r20, r24
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	9f e3       	ldi	r25, 0x3F	; 63
    12d4:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__divsf3>

000012d8 <__mulsf3>:
    12d8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__mulsf3x>
    12dc:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
    12e0:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
    12e4:	38 f0       	brcs	.+14     	; 0x12f4 <__mulsf3+0x1c>
    12e6:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
    12ea:	20 f0       	brcs	.+8      	; 0x12f4 <__mulsf3+0x1c>
    12ec:	95 23       	and	r25, r21
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <__mulsf3+0x1c>
    12f0:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_inf>
    12f4:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__fp_nan>
    12f8:	11 24       	eor	r1, r1
    12fa:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>

000012fe <__mulsf3x>:
    12fe:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
    1302:	70 f3       	brcs	.-36     	; 0x12e0 <__mulsf3+0x8>

00001304 <__mulsf3_pse>:
    1304:	95 9f       	mul	r25, r21
    1306:	c1 f3       	breq	.-16     	; 0x12f8 <__mulsf3+0x20>
    1308:	95 0f       	add	r25, r21
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	55 1f       	adc	r21, r21
    130e:	62 9f       	mul	r22, r18
    1310:	f0 01       	movw	r30, r0
    1312:	72 9f       	mul	r23, r18
    1314:	bb 27       	eor	r27, r27
    1316:	f0 0d       	add	r31, r0
    1318:	b1 1d       	adc	r27, r1
    131a:	63 9f       	mul	r22, r19
    131c:	aa 27       	eor	r26, r26
    131e:	f0 0d       	add	r31, r0
    1320:	b1 1d       	adc	r27, r1
    1322:	aa 1f       	adc	r26, r26
    1324:	64 9f       	mul	r22, r20
    1326:	66 27       	eor	r22, r22
    1328:	b0 0d       	add	r27, r0
    132a:	a1 1d       	adc	r26, r1
    132c:	66 1f       	adc	r22, r22
    132e:	82 9f       	mul	r24, r18
    1330:	22 27       	eor	r18, r18
    1332:	b0 0d       	add	r27, r0
    1334:	a1 1d       	adc	r26, r1
    1336:	62 1f       	adc	r22, r18
    1338:	73 9f       	mul	r23, r19
    133a:	b0 0d       	add	r27, r0
    133c:	a1 1d       	adc	r26, r1
    133e:	62 1f       	adc	r22, r18
    1340:	83 9f       	mul	r24, r19
    1342:	a0 0d       	add	r26, r0
    1344:	61 1d       	adc	r22, r1
    1346:	22 1f       	adc	r18, r18
    1348:	74 9f       	mul	r23, r20
    134a:	33 27       	eor	r19, r19
    134c:	a0 0d       	add	r26, r0
    134e:	61 1d       	adc	r22, r1
    1350:	23 1f       	adc	r18, r19
    1352:	84 9f       	mul	r24, r20
    1354:	60 0d       	add	r22, r0
    1356:	21 1d       	adc	r18, r1
    1358:	82 2f       	mov	r24, r18
    135a:	76 2f       	mov	r23, r22
    135c:	6a 2f       	mov	r22, r26
    135e:	11 24       	eor	r1, r1
    1360:	9f 57       	subi	r25, 0x7F	; 127
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	9a f0       	brmi	.+38     	; 0x138c <__mulsf3_pse+0x88>
    1366:	f1 f0       	breq	.+60     	; 0x13a4 <__mulsf3_pse+0xa0>
    1368:	88 23       	and	r24, r24
    136a:	4a f0       	brmi	.+18     	; 0x137e <__mulsf3_pse+0x7a>
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	bb 1f       	adc	r27, r27
    1372:	66 1f       	adc	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	91 50       	subi	r25, 0x01	; 1
    137a:	50 40       	sbci	r21, 0x00	; 0
    137c:	a9 f7       	brne	.-22     	; 0x1368 <__mulsf3_pse+0x64>
    137e:	9e 3f       	cpi	r25, 0xFE	; 254
    1380:	51 05       	cpc	r21, r1
    1382:	80 f0       	brcs	.+32     	; 0x13a4 <__mulsf3_pse+0xa0>
    1384:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_inf>
    1388:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	e4 f3       	brlt	.-8      	; 0x1388 <__mulsf3_pse+0x84>
    1390:	98 3e       	cpi	r25, 0xE8	; 232
    1392:	d4 f3       	brlt	.-12     	; 0x1388 <__mulsf3_pse+0x84>
    1394:	86 95       	lsr	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	b7 95       	ror	r27
    139c:	f7 95       	ror	r31
    139e:	e7 95       	ror	r30
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	c1 f7       	brne	.-16     	; 0x1394 <__mulsf3_pse+0x90>
    13a4:	fe 2b       	or	r31, r30
    13a6:	88 0f       	add	r24, r24
    13a8:	91 1d       	adc	r25, r1
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret

000013b2 <square>:
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__mulsf3>

000013ba <__mulsi3>:
    13ba:	db 01       	movw	r26, r22
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	0e 94 2e 0a 	call	0x145c	; 0x145c <__muluhisi3>
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	a2 9f       	mul	r26, r18
    13ca:	80 0d       	add	r24, r0
    13cc:	91 1d       	adc	r25, r1
    13ce:	a3 9f       	mul	r26, r19
    13d0:	90 0d       	add	r25, r0
    13d2:	b2 9f       	mul	r27, r18
    13d4:	90 0d       	add	r25, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	08 95       	ret

000013da <__udivmodsi4>:
    13da:	a1 e2       	ldi	r26, 0x21	; 33
    13dc:	1a 2e       	mov	r1, r26
    13de:	aa 1b       	sub	r26, r26
    13e0:	bb 1b       	sub	r27, r27
    13e2:	fd 01       	movw	r30, r26
    13e4:	0d c0       	rjmp	.+26     	; 0x1400 <__udivmodsi4_ep>

000013e6 <__udivmodsi4_loop>:
    13e6:	aa 1f       	adc	r26, r26
    13e8:	bb 1f       	adc	r27, r27
    13ea:	ee 1f       	adc	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	a2 17       	cp	r26, r18
    13f0:	b3 07       	cpc	r27, r19
    13f2:	e4 07       	cpc	r30, r20
    13f4:	f5 07       	cpc	r31, r21
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <__udivmodsi4_ep>
    13f8:	a2 1b       	sub	r26, r18
    13fa:	b3 0b       	sbc	r27, r19
    13fc:	e4 0b       	sbc	r30, r20
    13fe:	f5 0b       	sbc	r31, r21

00001400 <__udivmodsi4_ep>:
    1400:	66 1f       	adc	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	1a 94       	dec	r1
    140a:	69 f7       	brne	.-38     	; 0x13e6 <__udivmodsi4_loop>
    140c:	60 95       	com	r22
    140e:	70 95       	com	r23
    1410:	80 95       	com	r24
    1412:	90 95       	com	r25
    1414:	9b 01       	movw	r18, r22
    1416:	ac 01       	movw	r20, r24
    1418:	bd 01       	movw	r22, r26
    141a:	cf 01       	movw	r24, r30
    141c:	08 95       	ret

0000141e <__divmodsi4>:
    141e:	05 2e       	mov	r0, r21
    1420:	97 fb       	bst	r25, 7
    1422:	1e f4       	brtc	.+6      	; 0x142a <__divmodsi4+0xc>
    1424:	00 94       	com	r0
    1426:	0e 94 26 0a 	call	0x144c	; 0x144c <__negsi2>
    142a:	57 fd       	sbrc	r21, 7
    142c:	07 d0       	rcall	.+14     	; 0x143c <__divmodsi4_neg2>
    142e:	0e 94 ed 09 	call	0x13da	; 0x13da <__udivmodsi4>
    1432:	07 fc       	sbrc	r0, 7
    1434:	03 d0       	rcall	.+6      	; 0x143c <__divmodsi4_neg2>
    1436:	4e f4       	brtc	.+18     	; 0x144a <__divmodsi4_exit>
    1438:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__negsi2>

0000143c <__divmodsi4_neg2>:
    143c:	50 95       	com	r21
    143e:	40 95       	com	r20
    1440:	30 95       	com	r19
    1442:	21 95       	neg	r18
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	4f 4f       	sbci	r20, 0xFF	; 255
    1448:	5f 4f       	sbci	r21, 0xFF	; 255

0000144a <__divmodsi4_exit>:
    144a:	08 95       	ret

0000144c <__negsi2>:
    144c:	90 95       	com	r25
    144e:	80 95       	com	r24
    1450:	70 95       	com	r23
    1452:	61 95       	neg	r22
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__muluhisi3>:
    145c:	0e 94 39 0a 	call	0x1472	; 0x1472 <__umulhisi3>
    1460:	a5 9f       	mul	r26, r21
    1462:	90 0d       	add	r25, r0
    1464:	b4 9f       	mul	r27, r20
    1466:	90 0d       	add	r25, r0
    1468:	a4 9f       	mul	r26, r20
    146a:	80 0d       	add	r24, r0
    146c:	91 1d       	adc	r25, r1
    146e:	11 24       	eor	r1, r1
    1470:	08 95       	ret

00001472 <__umulhisi3>:
    1472:	a2 9f       	mul	r26, r18
    1474:	b0 01       	movw	r22, r0
    1476:	b3 9f       	mul	r27, r19
    1478:	c0 01       	movw	r24, r0
    147a:	a3 9f       	mul	r26, r19
    147c:	70 0d       	add	r23, r0
    147e:	81 1d       	adc	r24, r1
    1480:	11 24       	eor	r1, r1
    1482:	91 1d       	adc	r25, r1
    1484:	b2 9f       	mul	r27, r18
    1486:	70 0d       	add	r23, r0
    1488:	81 1d       	adc	r24, r1
    148a:	11 24       	eor	r1, r1
    148c:	91 1d       	adc	r25, r1
    148e:	08 95       	ret

00001490 <dtostrf>:
    1490:	ef 92       	push	r14
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	e8 01       	movw	r28, r16
    149c:	47 fd       	sbrc	r20, 7
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <dtostrf+0x14>
    14a0:	34 e0       	ldi	r19, 0x04	; 4
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <dtostrf+0x16>
    14a4:	34 e1       	ldi	r19, 0x14	; 20
    14a6:	04 2e       	mov	r0, r20
    14a8:	00 0c       	add	r0, r0
    14aa:	55 0b       	sbc	r21, r21
    14ac:	57 ff       	sbrs	r21, 7
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <dtostrf+0x26>
    14b0:	51 95       	neg	r21
    14b2:	41 95       	neg	r20
    14b4:	51 09       	sbc	r21, r1
    14b6:	e3 2e       	mov	r14, r19
    14b8:	02 2f       	mov	r16, r18
    14ba:	24 2f       	mov	r18, r20
    14bc:	ae 01       	movw	r20, r28
    14be:	0e 94 90 0c 	call	0x1920	; 0x1920 <dtoa_prf>
    14c2:	ce 01       	movw	r24, r28
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ef 90       	pop	r14
    14ce:	08 95       	ret

000014d0 <__itoa_ncheck>:
    14d0:	bb 27       	eor	r27, r27
    14d2:	4a 30       	cpi	r20, 0x0A	; 10
    14d4:	31 f4       	brne	.+12     	; 0x14e2 <__itoa_ncheck+0x12>
    14d6:	99 23       	and	r25, r25
    14d8:	22 f4       	brpl	.+8      	; 0x14e2 <__itoa_ncheck+0x12>
    14da:	bd e2       	ldi	r27, 0x2D	; 45
    14dc:	90 95       	com	r25
    14de:	81 95       	neg	r24
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__utoa_common>

000014e6 <__utoa_ncheck>:
    14e6:	bb 27       	eor	r27, r27

000014e8 <__utoa_common>:
    14e8:	fb 01       	movw	r30, r22
    14ea:	55 27       	eor	r21, r21
    14ec:	aa 27       	eor	r26, r26
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	aa 1f       	adc	r26, r26
    14f4:	a4 17       	cp	r26, r20
    14f6:	10 f0       	brcs	.+4      	; 0x14fc <__utoa_common+0x14>
    14f8:	a4 1b       	sub	r26, r20
    14fa:	83 95       	inc	r24
    14fc:	50 51       	subi	r21, 0x10	; 16
    14fe:	b9 f7       	brne	.-18     	; 0x14ee <__utoa_common+0x6>
    1500:	a0 5d       	subi	r26, 0xD0	; 208
    1502:	aa 33       	cpi	r26, 0x3A	; 58
    1504:	08 f0       	brcs	.+2      	; 0x1508 <__utoa_common+0x20>
    1506:	a9 5d       	subi	r26, 0xD9	; 217
    1508:	a1 93       	st	Z+, r26
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	79 f7       	brne	.-34     	; 0x14ec <__utoa_common+0x4>
    150e:	b1 11       	cpse	r27, r1
    1510:	b1 93       	st	Z+, r27
    1512:	11 92       	st	Z+, r1
    1514:	cb 01       	movw	r24, r22
    1516:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <strrev>

0000151a <sprintf>:
    151a:	ae e0       	ldi	r26, 0x0E	; 14
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e3 e9       	ldi	r30, 0x93	; 147
    1520:	fa e0       	ldi	r31, 0x0A	; 10
    1522:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__+0x1c>
    1526:	0d 89       	ldd	r16, Y+21	; 0x15
    1528:	1e 89       	ldd	r17, Y+22	; 0x16
    152a:	86 e0       	ldi	r24, 0x06	; 6
    152c:	8c 83       	std	Y+4, r24	; 0x04
    152e:	1a 83       	std	Y+2, r17	; 0x02
    1530:	09 83       	std	Y+1, r16	; 0x01
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	9f e7       	ldi	r25, 0x7F	; 127
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	ae 01       	movw	r20, r28
    153c:	47 5e       	subi	r20, 0xE7	; 231
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	6f 89       	ldd	r22, Y+23	; 0x17
    1542:	78 8d       	ldd	r23, Y+24	; 0x18
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	0e 94 af 0a 	call	0x155e	; 0x155e <vfprintf>
    154c:	ef 81       	ldd	r30, Y+7	; 0x07
    154e:	f8 85       	ldd	r31, Y+8	; 0x08
    1550:	e0 0f       	add	r30, r16
    1552:	f1 1f       	adc	r31, r17
    1554:	10 82       	st	Z, r1
    1556:	2e 96       	adiw	r28, 0x0e	; 14
    1558:	e4 e0       	ldi	r30, 0x04	; 4
    155a:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__+0x1c>

0000155e <vfprintf>:
    155e:	ab e0       	ldi	r26, 0x0B	; 11
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 eb       	ldi	r30, 0xB5	; 181
    1564:	fa e0       	ldi	r31, 0x0A	; 10
    1566:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__prologue_saves__>
    156a:	6c 01       	movw	r12, r24
    156c:	7b 01       	movw	r14, r22
    156e:	8a 01       	movw	r16, r20
    1570:	fc 01       	movw	r30, r24
    1572:	17 82       	std	Z+7, r1	; 0x07
    1574:	16 82       	std	Z+6, r1	; 0x06
    1576:	83 81       	ldd	r24, Z+3	; 0x03
    1578:	81 ff       	sbrs	r24, 1
    157a:	cc c1       	rjmp	.+920    	; 0x1914 <vfprintf+0x3b6>
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	3c 01       	movw	r6, r24
    1582:	f6 01       	movw	r30, r12
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	f7 01       	movw	r30, r14
    1588:	93 fd       	sbrc	r25, 3
    158a:	85 91       	lpm	r24, Z+
    158c:	93 ff       	sbrs	r25, 3
    158e:	81 91       	ld	r24, Z+
    1590:	7f 01       	movw	r14, r30
    1592:	88 23       	and	r24, r24
    1594:	09 f4       	brne	.+2      	; 0x1598 <vfprintf+0x3a>
    1596:	ba c1       	rjmp	.+884    	; 0x190c <vfprintf+0x3ae>
    1598:	85 32       	cpi	r24, 0x25	; 37
    159a:	39 f4       	brne	.+14     	; 0x15aa <vfprintf+0x4c>
    159c:	93 fd       	sbrc	r25, 3
    159e:	85 91       	lpm	r24, Z+
    15a0:	93 ff       	sbrs	r25, 3
    15a2:	81 91       	ld	r24, Z+
    15a4:	7f 01       	movw	r14, r30
    15a6:	85 32       	cpi	r24, 0x25	; 37
    15a8:	29 f4       	brne	.+10     	; 0x15b4 <vfprintf+0x56>
    15aa:	b6 01       	movw	r22, r12
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    15b2:	e7 cf       	rjmp	.-50     	; 0x1582 <vfprintf+0x24>
    15b4:	91 2c       	mov	r9, r1
    15b6:	21 2c       	mov	r2, r1
    15b8:	31 2c       	mov	r3, r1
    15ba:	ff e1       	ldi	r31, 0x1F	; 31
    15bc:	f3 15       	cp	r31, r3
    15be:	d8 f0       	brcs	.+54     	; 0x15f6 <vfprintf+0x98>
    15c0:	8b 32       	cpi	r24, 0x2B	; 43
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <vfprintf+0x84>
    15c4:	38 f4       	brcc	.+14     	; 0x15d4 <vfprintf+0x76>
    15c6:	80 32       	cpi	r24, 0x20	; 32
    15c8:	79 f0       	breq	.+30     	; 0x15e8 <vfprintf+0x8a>
    15ca:	83 32       	cpi	r24, 0x23	; 35
    15cc:	a1 f4       	brne	.+40     	; 0x15f6 <vfprintf+0x98>
    15ce:	23 2d       	mov	r18, r3
    15d0:	20 61       	ori	r18, 0x10	; 16
    15d2:	1d c0       	rjmp	.+58     	; 0x160e <vfprintf+0xb0>
    15d4:	8d 32       	cpi	r24, 0x2D	; 45
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <vfprintf+0x92>
    15d8:	80 33       	cpi	r24, 0x30	; 48
    15da:	69 f4       	brne	.+26     	; 0x15f6 <vfprintf+0x98>
    15dc:	23 2d       	mov	r18, r3
    15de:	21 60       	ori	r18, 0x01	; 1
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <vfprintf+0xb0>
    15e2:	83 2d       	mov	r24, r3
    15e4:	82 60       	ori	r24, 0x02	; 2
    15e6:	38 2e       	mov	r3, r24
    15e8:	e3 2d       	mov	r30, r3
    15ea:	e4 60       	ori	r30, 0x04	; 4
    15ec:	3e 2e       	mov	r3, r30
    15ee:	2a c0       	rjmp	.+84     	; 0x1644 <vfprintf+0xe6>
    15f0:	f3 2d       	mov	r31, r3
    15f2:	f8 60       	ori	r31, 0x08	; 8
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <vfprintf+0xd2>
    15f6:	37 fc       	sbrc	r3, 7
    15f8:	2d c0       	rjmp	.+90     	; 0x1654 <vfprintf+0xf6>
    15fa:	20 ed       	ldi	r18, 0xD0	; 208
    15fc:	28 0f       	add	r18, r24
    15fe:	2a 30       	cpi	r18, 0x0A	; 10
    1600:	40 f0       	brcs	.+16     	; 0x1612 <vfprintf+0xb4>
    1602:	8e 32       	cpi	r24, 0x2E	; 46
    1604:	b9 f4       	brne	.+46     	; 0x1634 <vfprintf+0xd6>
    1606:	36 fc       	sbrc	r3, 6
    1608:	81 c1       	rjmp	.+770    	; 0x190c <vfprintf+0x3ae>
    160a:	23 2d       	mov	r18, r3
    160c:	20 64       	ori	r18, 0x40	; 64
    160e:	32 2e       	mov	r3, r18
    1610:	19 c0       	rjmp	.+50     	; 0x1644 <vfprintf+0xe6>
    1612:	36 fe       	sbrs	r3, 6
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <vfprintf+0xc4>
    1616:	8a e0       	ldi	r24, 0x0A	; 10
    1618:	98 9e       	mul	r9, r24
    161a:	20 0d       	add	r18, r0
    161c:	11 24       	eor	r1, r1
    161e:	92 2e       	mov	r9, r18
    1620:	11 c0       	rjmp	.+34     	; 0x1644 <vfprintf+0xe6>
    1622:	ea e0       	ldi	r30, 0x0A	; 10
    1624:	2e 9e       	mul	r2, r30
    1626:	20 0d       	add	r18, r0
    1628:	11 24       	eor	r1, r1
    162a:	22 2e       	mov	r2, r18
    162c:	f3 2d       	mov	r31, r3
    162e:	f0 62       	ori	r31, 0x20	; 32
    1630:	3f 2e       	mov	r3, r31
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <vfprintf+0xe6>
    1634:	8c 36       	cpi	r24, 0x6C	; 108
    1636:	21 f4       	brne	.+8      	; 0x1640 <vfprintf+0xe2>
    1638:	83 2d       	mov	r24, r3
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	38 2e       	mov	r3, r24
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <vfprintf+0xe6>
    1640:	88 36       	cpi	r24, 0x68	; 104
    1642:	41 f4       	brne	.+16     	; 0x1654 <vfprintf+0xf6>
    1644:	f7 01       	movw	r30, r14
    1646:	93 fd       	sbrc	r25, 3
    1648:	85 91       	lpm	r24, Z+
    164a:	93 ff       	sbrs	r25, 3
    164c:	81 91       	ld	r24, Z+
    164e:	7f 01       	movw	r14, r30
    1650:	81 11       	cpse	r24, r1
    1652:	b3 cf       	rjmp	.-154    	; 0x15ba <vfprintf+0x5c>
    1654:	98 2f       	mov	r25, r24
    1656:	9f 7d       	andi	r25, 0xDF	; 223
    1658:	95 54       	subi	r25, 0x45	; 69
    165a:	93 30       	cpi	r25, 0x03	; 3
    165c:	28 f4       	brcc	.+10     	; 0x1668 <vfprintf+0x10a>
    165e:	0c 5f       	subi	r16, 0xFC	; 252
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	9f e3       	ldi	r25, 0x3F	; 63
    1664:	99 83       	std	Y+1, r25	; 0x01
    1666:	0d c0       	rjmp	.+26     	; 0x1682 <vfprintf+0x124>
    1668:	83 36       	cpi	r24, 0x63	; 99
    166a:	31 f0       	breq	.+12     	; 0x1678 <vfprintf+0x11a>
    166c:	83 37       	cpi	r24, 0x73	; 115
    166e:	71 f0       	breq	.+28     	; 0x168c <vfprintf+0x12e>
    1670:	83 35       	cpi	r24, 0x53	; 83
    1672:	09 f0       	breq	.+2      	; 0x1676 <vfprintf+0x118>
    1674:	59 c0       	rjmp	.+178    	; 0x1728 <vfprintf+0x1ca>
    1676:	21 c0       	rjmp	.+66     	; 0x16ba <vfprintf+0x15c>
    1678:	f8 01       	movw	r30, r16
    167a:	80 81       	ld	r24, Z
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	0e 5f       	subi	r16, 0xFE	; 254
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	88 24       	eor	r8, r8
    1684:	83 94       	inc	r8
    1686:	91 2c       	mov	r9, r1
    1688:	53 01       	movw	r10, r6
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <vfprintf+0x154>
    168c:	28 01       	movw	r4, r16
    168e:	f2 e0       	ldi	r31, 0x02	; 2
    1690:	4f 0e       	add	r4, r31
    1692:	51 1c       	adc	r5, r1
    1694:	f8 01       	movw	r30, r16
    1696:	a0 80       	ld	r10, Z
    1698:	b1 80       	ldd	r11, Z+1	; 0x01
    169a:	36 fe       	sbrs	r3, 6
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <vfprintf+0x146>
    169e:	69 2d       	mov	r22, r9
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x14a>
    16a4:	6f ef       	ldi	r22, 0xFF	; 255
    16a6:	7f ef       	ldi	r23, 0xFF	; 255
    16a8:	c5 01       	movw	r24, r10
    16aa:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <strnlen>
    16ae:	4c 01       	movw	r8, r24
    16b0:	82 01       	movw	r16, r4
    16b2:	f3 2d       	mov	r31, r3
    16b4:	ff 77       	andi	r31, 0x7F	; 127
    16b6:	3f 2e       	mov	r3, r31
    16b8:	16 c0       	rjmp	.+44     	; 0x16e6 <vfprintf+0x188>
    16ba:	28 01       	movw	r4, r16
    16bc:	22 e0       	ldi	r18, 0x02	; 2
    16be:	42 0e       	add	r4, r18
    16c0:	51 1c       	adc	r5, r1
    16c2:	f8 01       	movw	r30, r16
    16c4:	a0 80       	ld	r10, Z
    16c6:	b1 80       	ldd	r11, Z+1	; 0x01
    16c8:	36 fe       	sbrs	r3, 6
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <vfprintf+0x174>
    16cc:	69 2d       	mov	r22, r9
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <vfprintf+0x178>
    16d2:	6f ef       	ldi	r22, 0xFF	; 255
    16d4:	7f ef       	ldi	r23, 0xFF	; 255
    16d6:	c5 01       	movw	r24, r10
    16d8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <strnlen_P>
    16dc:	4c 01       	movw	r8, r24
    16de:	f3 2d       	mov	r31, r3
    16e0:	f0 68       	ori	r31, 0x80	; 128
    16e2:	3f 2e       	mov	r3, r31
    16e4:	82 01       	movw	r16, r4
    16e6:	33 fc       	sbrc	r3, 3
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <vfprintf+0x1c2>
    16ea:	82 2d       	mov	r24, r2
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	88 16       	cp	r8, r24
    16f0:	99 06       	cpc	r9, r25
    16f2:	b0 f4       	brcc	.+44     	; 0x1720 <vfprintf+0x1c2>
    16f4:	b6 01       	movw	r22, r12
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    16fe:	2a 94       	dec	r2
    1700:	f4 cf       	rjmp	.-24     	; 0x16ea <vfprintf+0x18c>
    1702:	f5 01       	movw	r30, r10
    1704:	37 fc       	sbrc	r3, 7
    1706:	85 91       	lpm	r24, Z+
    1708:	37 fe       	sbrs	r3, 7
    170a:	81 91       	ld	r24, Z+
    170c:	5f 01       	movw	r10, r30
    170e:	b6 01       	movw	r22, r12
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    1716:	21 10       	cpse	r2, r1
    1718:	2a 94       	dec	r2
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	82 1a       	sub	r8, r18
    171e:	91 08       	sbc	r9, r1
    1720:	81 14       	cp	r8, r1
    1722:	91 04       	cpc	r9, r1
    1724:	71 f7       	brne	.-36     	; 0x1702 <vfprintf+0x1a4>
    1726:	e8 c0       	rjmp	.+464    	; 0x18f8 <vfprintf+0x39a>
    1728:	84 36       	cpi	r24, 0x64	; 100
    172a:	11 f0       	breq	.+4      	; 0x1730 <vfprintf+0x1d2>
    172c:	89 36       	cpi	r24, 0x69	; 105
    172e:	41 f5       	brne	.+80     	; 0x1780 <vfprintf+0x222>
    1730:	f8 01       	movw	r30, r16
    1732:	37 fe       	sbrs	r3, 7
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <vfprintf+0x1e6>
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0c 5f       	subi	r16, 0xFC	; 252
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <vfprintf+0x1f6>
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	07 2e       	mov	r0, r23
    174a:	00 0c       	add	r0, r0
    174c:	88 0b       	sbc	r24, r24
    174e:	99 0b       	sbc	r25, r25
    1750:	0e 5f       	subi	r16, 0xFE	; 254
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	f3 2d       	mov	r31, r3
    1756:	ff 76       	andi	r31, 0x6F	; 111
    1758:	3f 2e       	mov	r3, r31
    175a:	97 ff       	sbrs	r25, 7
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <vfprintf+0x212>
    175e:	90 95       	com	r25
    1760:	80 95       	com	r24
    1762:	70 95       	com	r23
    1764:	61 95       	neg	r22
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	8f 4f       	sbci	r24, 0xFF	; 255
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	f0 68       	ori	r31, 0x80	; 128
    176e:	3f 2e       	mov	r3, r31
    1770:	2a e0       	ldi	r18, 0x0A	; 10
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	a3 01       	movw	r20, r6
    1776:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__ultoa_invert>
    177a:	88 2e       	mov	r8, r24
    177c:	86 18       	sub	r8, r6
    177e:	45 c0       	rjmp	.+138    	; 0x180a <vfprintf+0x2ac>
    1780:	85 37       	cpi	r24, 0x75	; 117
    1782:	31 f4       	brne	.+12     	; 0x1790 <vfprintf+0x232>
    1784:	23 2d       	mov	r18, r3
    1786:	2f 7e       	andi	r18, 0xEF	; 239
    1788:	b2 2e       	mov	r11, r18
    178a:	2a e0       	ldi	r18, 0x0A	; 10
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	25 c0       	rjmp	.+74     	; 0x17da <vfprintf+0x27c>
    1790:	93 2d       	mov	r25, r3
    1792:	99 7f       	andi	r25, 0xF9	; 249
    1794:	b9 2e       	mov	r11, r25
    1796:	8f 36       	cpi	r24, 0x6F	; 111
    1798:	c1 f0       	breq	.+48     	; 0x17ca <vfprintf+0x26c>
    179a:	18 f4       	brcc	.+6      	; 0x17a2 <vfprintf+0x244>
    179c:	88 35       	cpi	r24, 0x58	; 88
    179e:	79 f0       	breq	.+30     	; 0x17be <vfprintf+0x260>
    17a0:	b5 c0       	rjmp	.+362    	; 0x190c <vfprintf+0x3ae>
    17a2:	80 37       	cpi	r24, 0x70	; 112
    17a4:	19 f0       	breq	.+6      	; 0x17ac <vfprintf+0x24e>
    17a6:	88 37       	cpi	r24, 0x78	; 120
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <vfprintf+0x254>
    17aa:	b0 c0       	rjmp	.+352    	; 0x190c <vfprintf+0x3ae>
    17ac:	e9 2f       	mov	r30, r25
    17ae:	e0 61       	ori	r30, 0x10	; 16
    17b0:	be 2e       	mov	r11, r30
    17b2:	b4 fe       	sbrs	r11, 4
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <vfprintf+0x272>
    17b6:	fb 2d       	mov	r31, r11
    17b8:	f4 60       	ori	r31, 0x04	; 4
    17ba:	bf 2e       	mov	r11, r31
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <vfprintf+0x272>
    17be:	34 fe       	sbrs	r3, 4
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <vfprintf+0x278>
    17c2:	29 2f       	mov	r18, r25
    17c4:	26 60       	ori	r18, 0x06	; 6
    17c6:	b2 2e       	mov	r11, r18
    17c8:	06 c0       	rjmp	.+12     	; 0x17d6 <vfprintf+0x278>
    17ca:	28 e0       	ldi	r18, 0x08	; 8
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <vfprintf+0x27c>
    17d0:	20 e1       	ldi	r18, 0x10	; 16
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <vfprintf+0x27c>
    17d6:	20 e1       	ldi	r18, 0x10	; 16
    17d8:	32 e0       	ldi	r19, 0x02	; 2
    17da:	f8 01       	movw	r30, r16
    17dc:	b7 fe       	sbrs	r11, 7
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <vfprintf+0x290>
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	0c 5f       	subi	r16, 0xFC	; 252
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <vfprintf+0x29c>
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 5f       	subi	r16, 0xFE	; 254
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	a3 01       	movw	r20, r6
    17fc:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__ultoa_invert>
    1800:	88 2e       	mov	r8, r24
    1802:	86 18       	sub	r8, r6
    1804:	fb 2d       	mov	r31, r11
    1806:	ff 77       	andi	r31, 0x7F	; 127
    1808:	3f 2e       	mov	r3, r31
    180a:	36 fe       	sbrs	r3, 6
    180c:	0d c0       	rjmp	.+26     	; 0x1828 <vfprintf+0x2ca>
    180e:	23 2d       	mov	r18, r3
    1810:	2e 7f       	andi	r18, 0xFE	; 254
    1812:	a2 2e       	mov	r10, r18
    1814:	89 14       	cp	r8, r9
    1816:	58 f4       	brcc	.+22     	; 0x182e <vfprintf+0x2d0>
    1818:	34 fe       	sbrs	r3, 4
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <vfprintf+0x2d4>
    181c:	32 fc       	sbrc	r3, 2
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <vfprintf+0x2d4>
    1820:	83 2d       	mov	r24, r3
    1822:	8e 7e       	andi	r24, 0xEE	; 238
    1824:	a8 2e       	mov	r10, r24
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <vfprintf+0x2d4>
    1828:	b8 2c       	mov	r11, r8
    182a:	a3 2c       	mov	r10, r3
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <vfprintf+0x2d6>
    182e:	b8 2c       	mov	r11, r8
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <vfprintf+0x2d6>
    1832:	b9 2c       	mov	r11, r9
    1834:	a4 fe       	sbrs	r10, 4
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <vfprintf+0x2f8>
    1838:	fe 01       	movw	r30, r28
    183a:	e8 0d       	add	r30, r8
    183c:	f1 1d       	adc	r31, r1
    183e:	80 81       	ld	r24, Z
    1840:	80 33       	cpi	r24, 0x30	; 48
    1842:	21 f4       	brne	.+8      	; 0x184c <vfprintf+0x2ee>
    1844:	9a 2d       	mov	r25, r10
    1846:	99 7e       	andi	r25, 0xE9	; 233
    1848:	a9 2e       	mov	r10, r25
    184a:	09 c0       	rjmp	.+18     	; 0x185e <vfprintf+0x300>
    184c:	a2 fe       	sbrs	r10, 2
    184e:	06 c0       	rjmp	.+12     	; 0x185c <vfprintf+0x2fe>
    1850:	b3 94       	inc	r11
    1852:	b3 94       	inc	r11
    1854:	04 c0       	rjmp	.+8      	; 0x185e <vfprintf+0x300>
    1856:	8a 2d       	mov	r24, r10
    1858:	86 78       	andi	r24, 0x86	; 134
    185a:	09 f0       	breq	.+2      	; 0x185e <vfprintf+0x300>
    185c:	b3 94       	inc	r11
    185e:	a3 fc       	sbrc	r10, 3
    1860:	11 c0       	rjmp	.+34     	; 0x1884 <vfprintf+0x326>
    1862:	a0 fe       	sbrs	r10, 0
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <vfprintf+0x314>
    1866:	b2 14       	cp	r11, r2
    1868:	88 f4       	brcc	.+34     	; 0x188c <vfprintf+0x32e>
    186a:	28 0c       	add	r2, r8
    186c:	92 2c       	mov	r9, r2
    186e:	9b 18       	sub	r9, r11
    1870:	0e c0       	rjmp	.+28     	; 0x188e <vfprintf+0x330>
    1872:	b2 14       	cp	r11, r2
    1874:	60 f4       	brcc	.+24     	; 0x188e <vfprintf+0x330>
    1876:	b6 01       	movw	r22, r12
    1878:	80 e2       	ldi	r24, 0x20	; 32
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    1880:	b3 94       	inc	r11
    1882:	f7 cf       	rjmp	.-18     	; 0x1872 <vfprintf+0x314>
    1884:	b2 14       	cp	r11, r2
    1886:	18 f4       	brcc	.+6      	; 0x188e <vfprintf+0x330>
    1888:	2b 18       	sub	r2, r11
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <vfprintf+0x332>
    188c:	98 2c       	mov	r9, r8
    188e:	21 2c       	mov	r2, r1
    1890:	a4 fe       	sbrs	r10, 4
    1892:	10 c0       	rjmp	.+32     	; 0x18b4 <vfprintf+0x356>
    1894:	b6 01       	movw	r22, r12
    1896:	80 e3       	ldi	r24, 0x30	; 48
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    189e:	a2 fe       	sbrs	r10, 2
    18a0:	17 c0       	rjmp	.+46     	; 0x18d0 <vfprintf+0x372>
    18a2:	a1 fc       	sbrc	r10, 1
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <vfprintf+0x34e>
    18a6:	88 e7       	ldi	r24, 0x78	; 120
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x352>
    18ac:	88 e5       	ldi	r24, 0x58	; 88
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	b6 01       	movw	r22, r12
    18b2:	0c c0       	rjmp	.+24     	; 0x18cc <vfprintf+0x36e>
    18b4:	8a 2d       	mov	r24, r10
    18b6:	86 78       	andi	r24, 0x86	; 134
    18b8:	59 f0       	breq	.+22     	; 0x18d0 <vfprintf+0x372>
    18ba:	a1 fe       	sbrs	r10, 1
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <vfprintf+0x364>
    18be:	8b e2       	ldi	r24, 0x2B	; 43
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <vfprintf+0x366>
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	a7 fc       	sbrc	r10, 7
    18c6:	8d e2       	ldi	r24, 0x2D	; 45
    18c8:	b6 01       	movw	r22, r12
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    18d0:	89 14       	cp	r8, r9
    18d2:	38 f4       	brcc	.+14     	; 0x18e2 <vfprintf+0x384>
    18d4:	b6 01       	movw	r22, r12
    18d6:	80 e3       	ldi	r24, 0x30	; 48
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    18de:	9a 94       	dec	r9
    18e0:	f7 cf       	rjmp	.-18     	; 0x18d0 <vfprintf+0x372>
    18e2:	8a 94       	dec	r8
    18e4:	f3 01       	movw	r30, r6
    18e6:	e8 0d       	add	r30, r8
    18e8:	f1 1d       	adc	r31, r1
    18ea:	80 81       	ld	r24, Z
    18ec:	b6 01       	movw	r22, r12
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    18f4:	81 10       	cpse	r8, r1
    18f6:	f5 cf       	rjmp	.-22     	; 0x18e2 <vfprintf+0x384>
    18f8:	22 20       	and	r2, r2
    18fa:	09 f4       	brne	.+2      	; 0x18fe <vfprintf+0x3a0>
    18fc:	42 ce       	rjmp	.-892    	; 0x1582 <vfprintf+0x24>
    18fe:	b6 01       	movw	r22, r12
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <fputc>
    1908:	2a 94       	dec	r2
    190a:	f6 cf       	rjmp	.-20     	; 0x18f8 <vfprintf+0x39a>
    190c:	f6 01       	movw	r30, r12
    190e:	86 81       	ldd	r24, Z+6	; 0x06
    1910:	97 81       	ldd	r25, Z+7	; 0x07
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <vfprintf+0x3ba>
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	9f ef       	ldi	r25, 0xFF	; 255
    1918:	2b 96       	adiw	r28, 0x0b	; 11
    191a:	e2 e1       	ldi	r30, 0x12	; 18
    191c:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__epilogue_restores__>

00001920 <dtoa_prf>:
    1920:	a9 e0       	ldi	r26, 0x09	; 9
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e6 e9       	ldi	r30, 0x96	; 150
    1926:	fc e0       	ldi	r31, 0x0C	; 12
    1928:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__+0xc>
    192c:	6a 01       	movw	r12, r20
    192e:	12 2f       	mov	r17, r18
    1930:	b0 2e       	mov	r11, r16
    1932:	2b e3       	ldi	r18, 0x3B	; 59
    1934:	20 17       	cp	r18, r16
    1936:	20 f0       	brcs	.+8      	; 0x1940 <dtoa_prf+0x20>
    1938:	ff 24       	eor	r15, r15
    193a:	f3 94       	inc	r15
    193c:	f0 0e       	add	r15, r16
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <dtoa_prf+0x24>
    1940:	2c e3       	ldi	r18, 0x3C	; 60
    1942:	f2 2e       	mov	r15, r18
    1944:	0f 2d       	mov	r16, r15
    1946:	27 e0       	ldi	r18, 0x07	; 7
    1948:	ae 01       	movw	r20, r28
    194a:	4f 5f       	subi	r20, 0xFF	; 255
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__ftoa_engine>
    1952:	bc 01       	movw	r22, r24
    1954:	49 81       	ldd	r20, Y+1	; 0x01
    1956:	84 2f       	mov	r24, r20
    1958:	89 70       	andi	r24, 0x09	; 9
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	31 f0       	breq	.+12     	; 0x196a <dtoa_prf+0x4a>
    195e:	e1 fc       	sbrc	r14, 1
    1960:	06 c0       	rjmp	.+12     	; 0x196e <dtoa_prf+0x4e>
    1962:	e0 fe       	sbrs	r14, 0
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <dtoa_prf+0x52>
    1966:	90 e2       	ldi	r25, 0x20	; 32
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <dtoa_prf+0x54>
    196a:	9d e2       	ldi	r25, 0x2D	; 45
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <dtoa_prf+0x54>
    196e:	9b e2       	ldi	r25, 0x2B	; 43
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <dtoa_prf+0x54>
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	5e 2d       	mov	r21, r14
    1976:	50 71       	andi	r21, 0x10	; 16
    1978:	43 ff       	sbrs	r20, 3
    197a:	3c c0       	rjmp	.+120    	; 0x19f4 <dtoa_prf+0xd4>
    197c:	91 11       	cpse	r25, r1
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <dtoa_prf+0x64>
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <dtoa_prf+0x66>
    1984:	84 e0       	ldi	r24, 0x04	; 4
    1986:	81 17       	cp	r24, r17
    1988:	18 f4       	brcc	.+6      	; 0x1990 <dtoa_prf+0x70>
    198a:	21 2f       	mov	r18, r17
    198c:	28 1b       	sub	r18, r24
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <dtoa_prf+0x72>
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	51 11       	cpse	r21, r1
    1994:	0b c0       	rjmp	.+22     	; 0x19ac <dtoa_prf+0x8c>
    1996:	f6 01       	movw	r30, r12
    1998:	82 2f       	mov	r24, r18
    199a:	30 e2       	ldi	r19, 0x20	; 32
    199c:	88 23       	and	r24, r24
    199e:	19 f0       	breq	.+6      	; 0x19a6 <dtoa_prf+0x86>
    19a0:	31 93       	st	Z+, r19
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	fb cf       	rjmp	.-10     	; 0x199c <dtoa_prf+0x7c>
    19a6:	c2 0e       	add	r12, r18
    19a8:	d1 1c       	adc	r13, r1
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	99 23       	and	r25, r25
    19ae:	29 f0       	breq	.+10     	; 0x19ba <dtoa_prf+0x9a>
    19b0:	d6 01       	movw	r26, r12
    19b2:	9c 93       	st	X, r25
    19b4:	f6 01       	movw	r30, r12
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	6f 01       	movw	r12, r30
    19ba:	c6 01       	movw	r24, r12
    19bc:	03 96       	adiw	r24, 0x03	; 3
    19be:	e2 fe       	sbrs	r14, 2
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <dtoa_prf+0xb6>
    19c2:	3e e4       	ldi	r19, 0x4E	; 78
    19c4:	d6 01       	movw	r26, r12
    19c6:	3c 93       	st	X, r19
    19c8:	41 e4       	ldi	r20, 0x41	; 65
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	4c 93       	st	X, r20
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	12 96       	adiw	r26, 0x02	; 2
    19d2:	3c 93       	st	X, r19
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <dtoa_prf+0xc2>
    19d6:	3e e6       	ldi	r19, 0x6E	; 110
    19d8:	f6 01       	movw	r30, r12
    19da:	30 83       	st	Z, r19
    19dc:	41 e6       	ldi	r20, 0x61	; 97
    19de:	41 83       	std	Z+1, r20	; 0x01
    19e0:	32 83       	std	Z+2, r19	; 0x02
    19e2:	fc 01       	movw	r30, r24
    19e4:	32 2f       	mov	r19, r18
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	33 23       	and	r19, r19
    19ea:	09 f4       	brne	.+2      	; 0x19ee <dtoa_prf+0xce>
    19ec:	42 c0       	rjmp	.+132    	; 0x1a72 <dtoa_prf+0x152>
    19ee:	41 93       	st	Z+, r20
    19f0:	31 50       	subi	r19, 0x01	; 1
    19f2:	fa cf       	rjmp	.-12     	; 0x19e8 <dtoa_prf+0xc8>
    19f4:	42 ff       	sbrs	r20, 2
    19f6:	44 c0       	rjmp	.+136    	; 0x1a80 <dtoa_prf+0x160>
    19f8:	91 11       	cpse	r25, r1
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <dtoa_prf+0xe0>
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <dtoa_prf+0xe2>
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	81 17       	cp	r24, r17
    1a04:	18 f4       	brcc	.+6      	; 0x1a0c <dtoa_prf+0xec>
    1a06:	21 2f       	mov	r18, r17
    1a08:	28 1b       	sub	r18, r24
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <dtoa_prf+0xee>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	51 11       	cpse	r21, r1
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <dtoa_prf+0x108>
    1a12:	f6 01       	movw	r30, r12
    1a14:	82 2f       	mov	r24, r18
    1a16:	30 e2       	ldi	r19, 0x20	; 32
    1a18:	88 23       	and	r24, r24
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <dtoa_prf+0x102>
    1a1c:	31 93       	st	Z+, r19
    1a1e:	81 50       	subi	r24, 0x01	; 1
    1a20:	fb cf       	rjmp	.-10     	; 0x1a18 <dtoa_prf+0xf8>
    1a22:	c2 0e       	add	r12, r18
    1a24:	d1 1c       	adc	r13, r1
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	99 23       	and	r25, r25
    1a2a:	29 f0       	breq	.+10     	; 0x1a36 <dtoa_prf+0x116>
    1a2c:	d6 01       	movw	r26, r12
    1a2e:	9c 93       	st	X, r25
    1a30:	f6 01       	movw	r30, r12
    1a32:	31 96       	adiw	r30, 0x01	; 1
    1a34:	6f 01       	movw	r12, r30
    1a36:	c6 01       	movw	r24, r12
    1a38:	03 96       	adiw	r24, 0x03	; 3
    1a3a:	e2 fe       	sbrs	r14, 2
    1a3c:	0b c0       	rjmp	.+22     	; 0x1a54 <dtoa_prf+0x134>
    1a3e:	39 e4       	ldi	r19, 0x49	; 73
    1a40:	d6 01       	movw	r26, r12
    1a42:	3c 93       	st	X, r19
    1a44:	3e e4       	ldi	r19, 0x4E	; 78
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	3c 93       	st	X, r19
    1a4a:	11 97       	sbiw	r26, 0x01	; 1
    1a4c:	36 e4       	ldi	r19, 0x46	; 70
    1a4e:	12 96       	adiw	r26, 0x02	; 2
    1a50:	3c 93       	st	X, r19
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <dtoa_prf+0x142>
    1a54:	39 e6       	ldi	r19, 0x69	; 105
    1a56:	f6 01       	movw	r30, r12
    1a58:	30 83       	st	Z, r19
    1a5a:	3e e6       	ldi	r19, 0x6E	; 110
    1a5c:	31 83       	std	Z+1, r19	; 0x01
    1a5e:	36 e6       	ldi	r19, 0x66	; 102
    1a60:	32 83       	std	Z+2, r19	; 0x02
    1a62:	fc 01       	movw	r30, r24
    1a64:	32 2f       	mov	r19, r18
    1a66:	40 e2       	ldi	r20, 0x20	; 32
    1a68:	33 23       	and	r19, r19
    1a6a:	19 f0       	breq	.+6      	; 0x1a72 <dtoa_prf+0x152>
    1a6c:	41 93       	st	Z+, r20
    1a6e:	31 50       	subi	r19, 0x01	; 1
    1a70:	fb cf       	rjmp	.-10     	; 0x1a68 <dtoa_prf+0x148>
    1a72:	fc 01       	movw	r30, r24
    1a74:	e2 0f       	add	r30, r18
    1a76:	f1 1d       	adc	r31, r1
    1a78:	10 82       	st	Z, r1
    1a7a:	8e ef       	ldi	r24, 0xFE	; 254
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	a6 c0       	rjmp	.+332    	; 0x1bcc <dtoa_prf+0x2ac>
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	91 11       	cpse	r25, r1
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <dtoa_prf+0x16c>
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	16 16       	cp	r1, r22
    1a8e:	17 06       	cpc	r1, r23
    1a90:	1c f4       	brge	.+6      	; 0x1a98 <dtoa_prf+0x178>
    1a92:	fb 01       	movw	r30, r22
    1a94:	31 96       	adiw	r30, 0x01	; 1
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <dtoa_prf+0x17c>
    1a98:	e1 e0       	ldi	r30, 0x01	; 1
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	2e 0f       	add	r18, r30
    1a9e:	3f 1f       	adc	r19, r31
    1aa0:	bb 20       	and	r11, r11
    1aa2:	21 f0       	breq	.+8      	; 0x1aac <dtoa_prf+0x18c>
    1aa4:	eb 2d       	mov	r30, r11
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	31 96       	adiw	r30, 0x01	; 1
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <dtoa_prf+0x190>
    1aac:	e0 e0       	ldi	r30, 0x00	; 0
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	2e 0f       	add	r18, r30
    1ab2:	3f 1f       	adc	r19, r31
    1ab4:	e1 2f       	mov	r30, r17
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	2e 17       	cp	r18, r30
    1aba:	3f 07       	cpc	r19, r31
    1abc:	1c f4       	brge	.+6      	; 0x1ac4 <dtoa_prf+0x1a4>
    1abe:	12 1b       	sub	r17, r18
    1ac0:	21 2f       	mov	r18, r17
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <dtoa_prf+0x1a6>
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	8e 2d       	mov	r24, r14
    1ac8:	88 71       	andi	r24, 0x18	; 24
    1aca:	59 f4       	brne	.+22     	; 0x1ae2 <dtoa_prf+0x1c2>
    1acc:	f6 01       	movw	r30, r12
    1ace:	82 2f       	mov	r24, r18
    1ad0:	30 e2       	ldi	r19, 0x20	; 32
    1ad2:	88 23       	and	r24, r24
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <dtoa_prf+0x1bc>
    1ad6:	31 93       	st	Z+, r19
    1ad8:	81 50       	subi	r24, 0x01	; 1
    1ada:	fb cf       	rjmp	.-10     	; 0x1ad2 <dtoa_prf+0x1b2>
    1adc:	c2 0e       	add	r12, r18
    1ade:	d1 1c       	adc	r13, r1
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	99 23       	and	r25, r25
    1ae4:	29 f0       	breq	.+10     	; 0x1af0 <dtoa_prf+0x1d0>
    1ae6:	d6 01       	movw	r26, r12
    1ae8:	9c 93       	st	X, r25
    1aea:	f6 01       	movw	r30, r12
    1aec:	31 96       	adiw	r30, 0x01	; 1
    1aee:	6f 01       	movw	r12, r30
    1af0:	51 11       	cpse	r21, r1
    1af2:	0b c0       	rjmp	.+22     	; 0x1b0a <dtoa_prf+0x1ea>
    1af4:	f6 01       	movw	r30, r12
    1af6:	82 2f       	mov	r24, r18
    1af8:	90 e3       	ldi	r25, 0x30	; 48
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <dtoa_prf+0x1e4>
    1afe:	91 93       	st	Z+, r25
    1b00:	81 50       	subi	r24, 0x01	; 1
    1b02:	fb cf       	rjmp	.-10     	; 0x1afa <dtoa_prf+0x1da>
    1b04:	c2 0e       	add	r12, r18
    1b06:	d1 1c       	adc	r13, r1
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	0f 2d       	mov	r16, r15
    1b0c:	06 0f       	add	r16, r22
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	34 2f       	mov	r19, r20
    1b12:	30 71       	andi	r19, 0x10	; 16
    1b14:	44 ff       	sbrs	r20, 4
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <dtoa_prf+0x1fe>
    1b18:	91 33       	cpi	r25, 0x31	; 49
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <dtoa_prf+0x1fe>
    1b1c:	01 50       	subi	r16, 0x01	; 1
    1b1e:	10 16       	cp	r1, r16
    1b20:	24 f4       	brge	.+8      	; 0x1b2a <dtoa_prf+0x20a>
    1b22:	09 30       	cpi	r16, 0x09	; 9
    1b24:	18 f0       	brcs	.+6      	; 0x1b2c <dtoa_prf+0x20c>
    1b26:	08 e0       	ldi	r16, 0x08	; 8
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <dtoa_prf+0x20c>
    1b2a:	01 e0       	ldi	r16, 0x01	; 1
    1b2c:	ab 01       	movw	r20, r22
    1b2e:	77 ff       	sbrs	r23, 7
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <dtoa_prf+0x216>
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	fb 01       	movw	r30, r22
    1b38:	e4 1b       	sub	r30, r20
    1b3a:	f5 0b       	sbc	r31, r21
    1b3c:	a1 e0       	ldi	r26, 0x01	; 1
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	ac 0f       	add	r26, r28
    1b42:	bd 1f       	adc	r27, r29
    1b44:	ea 0f       	add	r30, r26
    1b46:	fb 1f       	adc	r31, r27
    1b48:	8e e2       	ldi	r24, 0x2E	; 46
    1b4a:	a8 2e       	mov	r10, r24
    1b4c:	4b 01       	movw	r8, r22
    1b4e:	80 1a       	sub	r8, r16
    1b50:	91 08       	sbc	r9, r1
    1b52:	0b 2d       	mov	r16, r11
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	11 95       	neg	r17
    1b58:	01 95       	neg	r16
    1b5a:	11 09       	sbc	r17, r1
    1b5c:	4f 3f       	cpi	r20, 0xFF	; 255
    1b5e:	bf ef       	ldi	r27, 0xFF	; 255
    1b60:	5b 07       	cpc	r21, r27
    1b62:	21 f4       	brne	.+8      	; 0x1b6c <dtoa_prf+0x24c>
    1b64:	d6 01       	movw	r26, r12
    1b66:	ac 92       	st	X, r10
    1b68:	11 96       	adiw	r26, 0x01	; 1
    1b6a:	6d 01       	movw	r12, r26
    1b6c:	64 17       	cp	r22, r20
    1b6e:	75 07       	cpc	r23, r21
    1b70:	2c f0       	brlt	.+10     	; 0x1b7c <dtoa_prf+0x25c>
    1b72:	84 16       	cp	r8, r20
    1b74:	95 06       	cpc	r9, r21
    1b76:	14 f4       	brge	.+4      	; 0x1b7c <dtoa_prf+0x25c>
    1b78:	81 81       	ldd	r24, Z+1	; 0x01
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <dtoa_prf+0x25e>
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	41 50       	subi	r20, 0x01	; 1
    1b80:	51 09       	sbc	r21, r1
    1b82:	31 96       	adiw	r30, 0x01	; 1
    1b84:	d6 01       	movw	r26, r12
    1b86:	11 96       	adiw	r26, 0x01	; 1
    1b88:	7d 01       	movw	r14, r26
    1b8a:	40 17       	cp	r20, r16
    1b8c:	51 07       	cpc	r21, r17
    1b8e:	24 f0       	brlt	.+8      	; 0x1b98 <dtoa_prf+0x278>
    1b90:	d6 01       	movw	r26, r12
    1b92:	8c 93       	st	X, r24
    1b94:	67 01       	movw	r12, r14
    1b96:	e2 cf       	rjmp	.-60     	; 0x1b5c <dtoa_prf+0x23c>
    1b98:	64 17       	cp	r22, r20
    1b9a:	75 07       	cpc	r23, r21
    1b9c:	39 f4       	brne	.+14     	; 0x1bac <dtoa_prf+0x28c>
    1b9e:	96 33       	cpi	r25, 0x36	; 54
    1ba0:	20 f4       	brcc	.+8      	; 0x1baa <dtoa_prf+0x28a>
    1ba2:	95 33       	cpi	r25, 0x35	; 53
    1ba4:	19 f4       	brne	.+6      	; 0x1bac <dtoa_prf+0x28c>
    1ba6:	31 11       	cpse	r19, r1
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <dtoa_prf+0x28c>
    1baa:	81 e3       	ldi	r24, 0x31	; 49
    1bac:	f6 01       	movw	r30, r12
    1bae:	80 83       	st	Z, r24
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	82 2f       	mov	r24, r18
    1bb4:	90 e2       	ldi	r25, 0x20	; 32
    1bb6:	88 23       	and	r24, r24
    1bb8:	19 f0       	breq	.+6      	; 0x1bc0 <dtoa_prf+0x2a0>
    1bba:	91 93       	st	Z+, r25
    1bbc:	81 50       	subi	r24, 0x01	; 1
    1bbe:	fb cf       	rjmp	.-10     	; 0x1bb6 <dtoa_prf+0x296>
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f1 1d       	adc	r31, r1
    1bc6:	10 82       	st	Z, r1
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	29 96       	adiw	r28, 0x09	; 9
    1bce:	ec e0       	ldi	r30, 0x0C	; 12
    1bd0:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__+0xc>

00001bd4 <__ftoa_engine>:
    1bd4:	28 30       	cpi	r18, 0x08	; 8
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <__ftoa_engine+0x6>
    1bd8:	27 e0       	ldi	r18, 0x07	; 7
    1bda:	33 27       	eor	r19, r19
    1bdc:	da 01       	movw	r26, r20
    1bde:	99 0f       	add	r25, r25
    1be0:	31 1d       	adc	r19, r1
    1be2:	87 fd       	sbrc	r24, 7
    1be4:	91 60       	ori	r25, 0x01	; 1
    1be6:	00 96       	adiw	r24, 0x00	; 0
    1be8:	61 05       	cpc	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <__ftoa_engine+0x28>
    1bee:	32 60       	ori	r19, 0x02	; 2
    1bf0:	2e 5f       	subi	r18, 0xFE	; 254
    1bf2:	3d 93       	st	X+, r19
    1bf4:	30 e3       	ldi	r19, 0x30	; 48
    1bf6:	2a 95       	dec	r18
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <__ftoa_engine+0x1e>
    1bfa:	08 95       	ret
    1bfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1bfe:	30 f0       	brcs	.+12     	; 0x1c0c <__ftoa_engine+0x38>
    1c00:	80 38       	cpi	r24, 0x80	; 128
    1c02:	71 05       	cpc	r23, r1
    1c04:	61 05       	cpc	r22, r1
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <__ftoa_engine+0x36>
    1c08:	3c 5f       	subi	r19, 0xFC	; 252
    1c0a:	3c 5f       	subi	r19, 0xFC	; 252
    1c0c:	3d 93       	st	X+, r19
    1c0e:	91 30       	cpi	r25, 0x01	; 1
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <__ftoa_engine+0x40>
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	91 1d       	adc	r25, r1
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	1f 93       	push	r17
    1c1c:	0f 93       	push	r16
    1c1e:	ff 92       	push	r15
    1c20:	ef 92       	push	r14
    1c22:	19 2f       	mov	r17, r25
    1c24:	98 7f       	andi	r25, 0xF8	; 248
    1c26:	96 95       	lsr	r25
    1c28:	e9 2f       	mov	r30, r25
    1c2a:	96 95       	lsr	r25
    1c2c:	96 95       	lsr	r25
    1c2e:	e9 0f       	add	r30, r25
    1c30:	ff 27       	eor	r31, r31
    1c32:	e0 51       	subi	r30, 0x10	; 16
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	99 27       	eor	r25, r25
    1c38:	33 27       	eor	r19, r19
    1c3a:	ee 24       	eor	r14, r14
    1c3c:	ff 24       	eor	r15, r15
    1c3e:	a7 01       	movw	r20, r14
    1c40:	e7 01       	movw	r28, r14
    1c42:	05 90       	lpm	r0, Z+
    1c44:	08 94       	sec
    1c46:	07 94       	ror	r0
    1c48:	28 f4       	brcc	.+10     	; 0x1c54 <__ftoa_engine+0x80>
    1c4a:	36 0f       	add	r19, r22
    1c4c:	e7 1e       	adc	r14, r23
    1c4e:	f8 1e       	adc	r15, r24
    1c50:	49 1f       	adc	r20, r25
    1c52:	51 1d       	adc	r21, r1
    1c54:	66 0f       	add	r22, r22
    1c56:	77 1f       	adc	r23, r23
    1c58:	88 1f       	adc	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	06 94       	lsr	r0
    1c5e:	a1 f7       	brne	.-24     	; 0x1c48 <__ftoa_engine+0x74>
    1c60:	05 90       	lpm	r0, Z+
    1c62:	07 94       	ror	r0
    1c64:	28 f4       	brcc	.+10     	; 0x1c70 <__ftoa_engine+0x9c>
    1c66:	e7 0e       	add	r14, r23
    1c68:	f8 1e       	adc	r15, r24
    1c6a:	49 1f       	adc	r20, r25
    1c6c:	56 1f       	adc	r21, r22
    1c6e:	c1 1d       	adc	r28, r1
    1c70:	77 0f       	add	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	66 1f       	adc	r22, r22
    1c78:	06 94       	lsr	r0
    1c7a:	a1 f7       	brne	.-24     	; 0x1c64 <__ftoa_engine+0x90>
    1c7c:	05 90       	lpm	r0, Z+
    1c7e:	07 94       	ror	r0
    1c80:	28 f4       	brcc	.+10     	; 0x1c8c <__ftoa_engine+0xb8>
    1c82:	f8 0e       	add	r15, r24
    1c84:	49 1f       	adc	r20, r25
    1c86:	56 1f       	adc	r21, r22
    1c88:	c7 1f       	adc	r28, r23
    1c8a:	d1 1d       	adc	r29, r1
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	66 1f       	adc	r22, r22
    1c92:	77 1f       	adc	r23, r23
    1c94:	06 94       	lsr	r0
    1c96:	a1 f7       	brne	.-24     	; 0x1c80 <__ftoa_engine+0xac>
    1c98:	05 90       	lpm	r0, Z+
    1c9a:	07 94       	ror	r0
    1c9c:	20 f4       	brcc	.+8      	; 0x1ca6 <__ftoa_engine+0xd2>
    1c9e:	49 0f       	add	r20, r25
    1ca0:	56 1f       	adc	r21, r22
    1ca2:	c7 1f       	adc	r28, r23
    1ca4:	d8 1f       	adc	r29, r24
    1ca6:	99 0f       	add	r25, r25
    1ca8:	66 1f       	adc	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	88 1f       	adc	r24, r24
    1cae:	06 94       	lsr	r0
    1cb0:	a9 f7       	brne	.-22     	; 0x1c9c <__ftoa_engine+0xc8>
    1cb2:	84 91       	lpm	r24, Z
    1cb4:	10 95       	com	r17
    1cb6:	17 70       	andi	r17, 0x07	; 7
    1cb8:	41 f0       	breq	.+16     	; 0x1cca <__ftoa_engine+0xf6>
    1cba:	d6 95       	lsr	r29
    1cbc:	c7 95       	ror	r28
    1cbe:	57 95       	ror	r21
    1cc0:	47 95       	ror	r20
    1cc2:	f7 94       	ror	r15
    1cc4:	e7 94       	ror	r14
    1cc6:	1a 95       	dec	r17
    1cc8:	c1 f7       	brne	.-16     	; 0x1cba <__ftoa_engine+0xe6>
    1cca:	e6 e9       	ldi	r30, 0x96	; 150
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	68 94       	set
    1cd0:	15 90       	lpm	r1, Z+
    1cd2:	15 91       	lpm	r17, Z+
    1cd4:	35 91       	lpm	r19, Z+
    1cd6:	65 91       	lpm	r22, Z+
    1cd8:	95 91       	lpm	r25, Z+
    1cda:	05 90       	lpm	r0, Z+
    1cdc:	7f e2       	ldi	r23, 0x2F	; 47
    1cde:	73 95       	inc	r23
    1ce0:	e1 18       	sub	r14, r1
    1ce2:	f1 0a       	sbc	r15, r17
    1ce4:	43 0b       	sbc	r20, r19
    1ce6:	56 0b       	sbc	r21, r22
    1ce8:	c9 0b       	sbc	r28, r25
    1cea:	d0 09       	sbc	r29, r0
    1cec:	c0 f7       	brcc	.-16     	; 0x1cde <__ftoa_engine+0x10a>
    1cee:	e1 0c       	add	r14, r1
    1cf0:	f1 1e       	adc	r15, r17
    1cf2:	43 1f       	adc	r20, r19
    1cf4:	56 1f       	adc	r21, r22
    1cf6:	c9 1f       	adc	r28, r25
    1cf8:	d0 1d       	adc	r29, r0
    1cfa:	7e f4       	brtc	.+30     	; 0x1d1a <__ftoa_engine+0x146>
    1cfc:	70 33       	cpi	r23, 0x30	; 48
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <__ftoa_engine+0x130>
    1d00:	8a 95       	dec	r24
    1d02:	e6 cf       	rjmp	.-52     	; 0x1cd0 <__ftoa_engine+0xfc>
    1d04:	e8 94       	clt
    1d06:	01 50       	subi	r16, 0x01	; 1
    1d08:	30 f0       	brcs	.+12     	; 0x1d16 <__ftoa_engine+0x142>
    1d0a:	08 0f       	add	r16, r24
    1d0c:	0a f4       	brpl	.+2      	; 0x1d10 <__ftoa_engine+0x13c>
    1d0e:	00 27       	eor	r16, r16
    1d10:	02 17       	cp	r16, r18
    1d12:	08 f4       	brcc	.+2      	; 0x1d16 <__ftoa_engine+0x142>
    1d14:	20 2f       	mov	r18, r16
    1d16:	23 95       	inc	r18
    1d18:	02 2f       	mov	r16, r18
    1d1a:	7a 33       	cpi	r23, 0x3A	; 58
    1d1c:	28 f0       	brcs	.+10     	; 0x1d28 <__ftoa_engine+0x154>
    1d1e:	79 e3       	ldi	r23, 0x39	; 57
    1d20:	7d 93       	st	X+, r23
    1d22:	2a 95       	dec	r18
    1d24:	e9 f7       	brne	.-6      	; 0x1d20 <__ftoa_engine+0x14c>
    1d26:	10 c0       	rjmp	.+32     	; 0x1d48 <__ftoa_engine+0x174>
    1d28:	7d 93       	st	X+, r23
    1d2a:	2a 95       	dec	r18
    1d2c:	89 f6       	brne	.-94     	; 0x1cd0 <__ftoa_engine+0xfc>
    1d2e:	06 94       	lsr	r0
    1d30:	97 95       	ror	r25
    1d32:	67 95       	ror	r22
    1d34:	37 95       	ror	r19
    1d36:	17 95       	ror	r17
    1d38:	17 94       	ror	r1
    1d3a:	e1 18       	sub	r14, r1
    1d3c:	f1 0a       	sbc	r15, r17
    1d3e:	43 0b       	sbc	r20, r19
    1d40:	56 0b       	sbc	r21, r22
    1d42:	c9 0b       	sbc	r28, r25
    1d44:	d0 09       	sbc	r29, r0
    1d46:	98 f0       	brcs	.+38     	; 0x1d6e <__ftoa_engine+0x19a>
    1d48:	23 95       	inc	r18
    1d4a:	7e 91       	ld	r23, -X
    1d4c:	73 95       	inc	r23
    1d4e:	7a 33       	cpi	r23, 0x3A	; 58
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <__ftoa_engine+0x180>
    1d52:	70 e3       	ldi	r23, 0x30	; 48
    1d54:	7c 93       	st	X, r23
    1d56:	20 13       	cpse	r18, r16
    1d58:	b8 f7       	brcc	.-18     	; 0x1d48 <__ftoa_engine+0x174>
    1d5a:	7e 91       	ld	r23, -X
    1d5c:	70 61       	ori	r23, 0x10	; 16
    1d5e:	7d 93       	st	X+, r23
    1d60:	30 f0       	brcs	.+12     	; 0x1d6e <__ftoa_engine+0x19a>
    1d62:	83 95       	inc	r24
    1d64:	71 e3       	ldi	r23, 0x31	; 49
    1d66:	7d 93       	st	X+, r23
    1d68:	70 e3       	ldi	r23, 0x30	; 48
    1d6a:	2a 95       	dec	r18
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <__ftoa_engine+0x192>
    1d6e:	11 24       	eor	r1, r1
    1d70:	ef 90       	pop	r14
    1d72:	ff 90       	pop	r15
    1d74:	0f 91       	pop	r16
    1d76:	1f 91       	pop	r17
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	99 27       	eor	r25, r25
    1d7e:	87 fd       	sbrc	r24, 7
    1d80:	90 95       	com	r25
    1d82:	08 95       	ret

00001d84 <strnlen_P>:
    1d84:	fc 01       	movw	r30, r24
    1d86:	05 90       	lpm	r0, Z+
    1d88:	61 50       	subi	r22, 0x01	; 1
    1d8a:	70 40       	sbci	r23, 0x00	; 0
    1d8c:	01 10       	cpse	r0, r1
    1d8e:	d8 f7       	brcc	.-10     	; 0x1d86 <strnlen_P+0x2>
    1d90:	80 95       	com	r24
    1d92:	90 95       	com	r25
    1d94:	8e 0f       	add	r24, r30
    1d96:	9f 1f       	adc	r25, r31
    1d98:	08 95       	ret

00001d9a <strnlen>:
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	61 50       	subi	r22, 0x01	; 1
    1d9e:	70 40       	sbci	r23, 0x00	; 0
    1da0:	01 90       	ld	r0, Z+
    1da2:	01 10       	cpse	r0, r1
    1da4:	d8 f7       	brcc	.-10     	; 0x1d9c <strnlen+0x2>
    1da6:	80 95       	com	r24
    1da8:	90 95       	com	r25
    1daa:	8e 0f       	add	r24, r30
    1dac:	9f 1f       	adc	r25, r31
    1dae:	08 95       	ret

00001db0 <strrev>:
    1db0:	dc 01       	movw	r26, r24
    1db2:	fc 01       	movw	r30, r24
    1db4:	67 2f       	mov	r22, r23
    1db6:	71 91       	ld	r23, Z+
    1db8:	77 23       	and	r23, r23
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <strrev+0x4>
    1dbc:	32 97       	sbiw	r30, 0x02	; 2
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <strrev+0x18>
    1dc0:	7c 91       	ld	r23, X
    1dc2:	6d 93       	st	X+, r22
    1dc4:	70 83       	st	Z, r23
    1dc6:	62 91       	ld	r22, -Z
    1dc8:	ae 17       	cp	r26, r30
    1dca:	bf 07       	cpc	r27, r31
    1dcc:	c8 f3       	brcs	.-14     	; 0x1dc0 <strrev+0x10>
    1dce:	08 95       	ret

00001dd0 <fputc>:
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	fb 01       	movw	r30, r22
    1dda:	23 81       	ldd	r18, Z+3	; 0x03
    1ddc:	21 fd       	sbrc	r18, 1
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <fputc+0x16>
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	9f ef       	ldi	r25, 0xFF	; 255
    1de4:	2c c0       	rjmp	.+88     	; 0x1e3e <fputc+0x6e>
    1de6:	22 ff       	sbrs	r18, 2
    1de8:	16 c0       	rjmp	.+44     	; 0x1e16 <fputc+0x46>
    1dea:	46 81       	ldd	r20, Z+6	; 0x06
    1dec:	57 81       	ldd	r21, Z+7	; 0x07
    1dee:	24 81       	ldd	r18, Z+4	; 0x04
    1df0:	35 81       	ldd	r19, Z+5	; 0x05
    1df2:	42 17       	cp	r20, r18
    1df4:	53 07       	cpc	r21, r19
    1df6:	44 f4       	brge	.+16     	; 0x1e08 <fputc+0x38>
    1df8:	a0 81       	ld	r26, Z
    1dfa:	b1 81       	ldd	r27, Z+1	; 0x01
    1dfc:	9d 01       	movw	r18, r26
    1dfe:	2f 5f       	subi	r18, 0xFF	; 255
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	31 83       	std	Z+1, r19	; 0x01
    1e04:	20 83       	st	Z, r18
    1e06:	8c 93       	st	X, r24
    1e08:	26 81       	ldd	r18, Z+6	; 0x06
    1e0a:	37 81       	ldd	r19, Z+7	; 0x07
    1e0c:	2f 5f       	subi	r18, 0xFF	; 255
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	37 83       	std	Z+7, r19	; 0x07
    1e12:	26 83       	std	Z+6, r18	; 0x06
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <fputc+0x6e>
    1e16:	8b 01       	movw	r16, r22
    1e18:	ec 01       	movw	r28, r24
    1e1a:	fb 01       	movw	r30, r22
    1e1c:	00 84       	ldd	r0, Z+8	; 0x08
    1e1e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e20:	e0 2d       	mov	r30, r0
    1e22:	09 95       	icall
    1e24:	89 2b       	or	r24, r25
    1e26:	e1 f6       	brne	.-72     	; 0x1de0 <fputc+0x10>
    1e28:	d8 01       	movw	r26, r16
    1e2a:	16 96       	adiw	r26, 0x06	; 6
    1e2c:	8d 91       	ld	r24, X+
    1e2e:	9c 91       	ld	r25, X
    1e30:	17 97       	sbiw	r26, 0x07	; 7
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	17 96       	adiw	r26, 0x07	; 7
    1e36:	9c 93       	st	X, r25
    1e38:	8e 93       	st	-X, r24
    1e3a:	16 97       	sbiw	r26, 0x06	; 6
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <__ultoa_invert>:
    1e48:	fa 01       	movw	r30, r20
    1e4a:	aa 27       	eor	r26, r26
    1e4c:	28 30       	cpi	r18, 0x08	; 8
    1e4e:	51 f1       	breq	.+84     	; 0x1ea4 <__ultoa_invert+0x5c>
    1e50:	20 31       	cpi	r18, 0x10	; 16
    1e52:	81 f1       	breq	.+96     	; 0x1eb4 <__ultoa_invert+0x6c>
    1e54:	e8 94       	clt
    1e56:	6f 93       	push	r22
    1e58:	6e 7f       	andi	r22, 0xFE	; 254
    1e5a:	6e 5f       	subi	r22, 0xFE	; 254
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	af 4f       	sbci	r26, 0xFF	; 255
    1e64:	b1 e0       	ldi	r27, 0x01	; 1
    1e66:	3e d0       	rcall	.+124    	; 0x1ee4 <__ultoa_invert+0x9c>
    1e68:	b4 e0       	ldi	r27, 0x04	; 4
    1e6a:	3c d0       	rcall	.+120    	; 0x1ee4 <__ultoa_invert+0x9c>
    1e6c:	67 0f       	add	r22, r23
    1e6e:	78 1f       	adc	r23, r24
    1e70:	89 1f       	adc	r24, r25
    1e72:	9a 1f       	adc	r25, r26
    1e74:	a1 1d       	adc	r26, r1
    1e76:	68 0f       	add	r22, r24
    1e78:	79 1f       	adc	r23, r25
    1e7a:	8a 1f       	adc	r24, r26
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	a1 1d       	adc	r26, r1
    1e80:	6a 0f       	add	r22, r26
    1e82:	71 1d       	adc	r23, r1
    1e84:	81 1d       	adc	r24, r1
    1e86:	91 1d       	adc	r25, r1
    1e88:	a1 1d       	adc	r26, r1
    1e8a:	20 d0       	rcall	.+64     	; 0x1ecc <__ultoa_invert+0x84>
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <__ultoa_invert+0x48>
    1e8e:	68 94       	set
    1e90:	3f 91       	pop	r19
    1e92:	2a e0       	ldi	r18, 0x0A	; 10
    1e94:	26 9f       	mul	r18, r22
    1e96:	11 24       	eor	r1, r1
    1e98:	30 19       	sub	r19, r0
    1e9a:	30 5d       	subi	r19, 0xD0	; 208
    1e9c:	31 93       	st	Z+, r19
    1e9e:	de f6       	brtc	.-74     	; 0x1e56 <__ultoa_invert+0xe>
    1ea0:	cf 01       	movw	r24, r30
    1ea2:	08 95       	ret
    1ea4:	46 2f       	mov	r20, r22
    1ea6:	47 70       	andi	r20, 0x07	; 7
    1ea8:	40 5d       	subi	r20, 0xD0	; 208
    1eaa:	41 93       	st	Z+, r20
    1eac:	b3 e0       	ldi	r27, 0x03	; 3
    1eae:	0f d0       	rcall	.+30     	; 0x1ece <__ultoa_invert+0x86>
    1eb0:	c9 f7       	brne	.-14     	; 0x1ea4 <__ultoa_invert+0x5c>
    1eb2:	f6 cf       	rjmp	.-20     	; 0x1ea0 <__ultoa_invert+0x58>
    1eb4:	46 2f       	mov	r20, r22
    1eb6:	4f 70       	andi	r20, 0x0F	; 15
    1eb8:	40 5d       	subi	r20, 0xD0	; 208
    1eba:	4a 33       	cpi	r20, 0x3A	; 58
    1ebc:	18 f0       	brcs	.+6      	; 0x1ec4 <__ultoa_invert+0x7c>
    1ebe:	49 5d       	subi	r20, 0xD9	; 217
    1ec0:	31 fd       	sbrc	r19, 1
    1ec2:	40 52       	subi	r20, 0x20	; 32
    1ec4:	41 93       	st	Z+, r20
    1ec6:	02 d0       	rcall	.+4      	; 0x1ecc <__ultoa_invert+0x84>
    1ec8:	a9 f7       	brne	.-22     	; 0x1eb4 <__ultoa_invert+0x6c>
    1eca:	ea cf       	rjmp	.-44     	; 0x1ea0 <__ultoa_invert+0x58>
    1ecc:	b4 e0       	ldi	r27, 0x04	; 4
    1ece:	a6 95       	lsr	r26
    1ed0:	97 95       	ror	r25
    1ed2:	87 95       	ror	r24
    1ed4:	77 95       	ror	r23
    1ed6:	67 95       	ror	r22
    1ed8:	ba 95       	dec	r27
    1eda:	c9 f7       	brne	.-14     	; 0x1ece <__ultoa_invert+0x86>
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	61 05       	cpc	r22, r1
    1ee0:	71 05       	cpc	r23, r1
    1ee2:	08 95       	ret
    1ee4:	9b 01       	movw	r18, r22
    1ee6:	ac 01       	movw	r20, r24
    1ee8:	0a 2e       	mov	r0, r26
    1eea:	06 94       	lsr	r0
    1eec:	57 95       	ror	r21
    1eee:	47 95       	ror	r20
    1ef0:	37 95       	ror	r19
    1ef2:	27 95       	ror	r18
    1ef4:	ba 95       	dec	r27
    1ef6:	c9 f7       	brne	.-14     	; 0x1eea <__ultoa_invert+0xa2>
    1ef8:	62 0f       	add	r22, r18
    1efa:	73 1f       	adc	r23, r19
    1efc:	84 1f       	adc	r24, r20
    1efe:	95 1f       	adc	r25, r21
    1f00:	a0 1d       	adc	r26, r0
    1f02:	08 95       	ret

00001f04 <__prologue_saves__>:
    1f04:	2f 92       	push	r2
    1f06:	3f 92       	push	r3
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	ca 1b       	sub	r28, r26
    1f2e:	db 0b       	sbc	r29, r27
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	09 94       	ijmp

00001f3c <__epilogue_restores__>:
    1f3c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f3e:	39 88       	ldd	r3, Y+17	; 0x11
    1f40:	48 88       	ldd	r4, Y+16	; 0x10
    1f42:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f44:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f46:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f48:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f4e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f50:	c8 84       	ldd	r12, Y+8	; 0x08
    1f52:	df 80       	ldd	r13, Y+7	; 0x07
    1f54:	ee 80       	ldd	r14, Y+6	; 0x06
    1f56:	fd 80       	ldd	r15, Y+5	; 0x05
    1f58:	0c 81       	ldd	r16, Y+4	; 0x04
    1f5a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f5c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f5e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f60:	ce 0f       	add	r28, r30
    1f62:	d1 1d       	adc	r29, r1
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	ed 01       	movw	r28, r26
    1f70:	08 95       	ret

00001f72 <_exit>:
    1f72:	f8 94       	cli

00001f74 <__stop_program>:
    1f74:	ff cf       	rjmp	.-2      	; 0x1f74 <__stop_program>
